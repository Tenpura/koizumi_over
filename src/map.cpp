/*
 * map.cpp
 *
 *  Created on: 2016/10/29
 *      Author: Koizumi
 */

#include"map.h"

//map_wall(x,y,RIGHT)->1or0
MAZE_WALL map::x_maze_wall[MAZE_SIZE], map::y_maze_wall[MAZE_SIZE];
MAZE_WALL map::x_wall_exist[MAZE_SIZE], map::y_wall_exist[MAZE_SIZE];

//target_wall„ÅÆedit_numberÁõÆ„Å´set_number„Çí‰ª£ÂÖ•„Åô„ÇãÈñ¢Êï∞
void map::set_maze_wall(MAZE_WALL* const maze_wall, unsigned char edit_number,
		bool is_wall) {
	int8_t set_number;
	if (is_wall)
		set_number = 1;
	else
		set_number = 0;

	switch (edit_number) {
	case 0:
		maze_wall->bit.B0 = set_number;
		break;
	case 1:
		maze_wall->bit.B1 = set_number;
		break;
	case 2:
		maze_wall->bit.B2 = set_number;
		break;
	case 3:
		maze_wall->bit.B3 = set_number;
		break;
	case 4:
		maze_wall->bit.B4 = set_number;
		break;
	case 5:
		maze_wall->bit.B5 = set_number;
		break;
	case 6:
		maze_wall->bit.B6 = set_number;
		break;
	case 7:
		maze_wall->bit.B7 = set_number;
		break;
	case 8:
		maze_wall->bit.B8 = set_number;
		break;
	case 9:
		maze_wall->bit.B9 = set_number;
		break;
	case 10:
		maze_wall->bit.B10 = set_number;
		break;
	case 11:
		maze_wall->bit.B11 = set_number;
		break;
	case 12:
		maze_wall->bit.B12 = set_number;
		break;
	case 13:
		maze_wall->bit.B13 = set_number;
		break;
	case 14:
		maze_wall->bit.B14 = set_number;
		break;
	case 15:
		maze_wall->bit.B15 = set_number;
		break;
	case 16:
		maze_wall->bit.B16 = set_number;
		break;
	case 17:
		maze_wall->bit.B17 = set_number;
		break;
	case 18:
		maze_wall->bit.B18 = set_number;
		break;
	case 19:
		maze_wall->bit.B19 = set_number;
		break;
	case 20:
		maze_wall->bit.B20 = set_number;
		break;
	case 21:
		maze_wall->bit.B21 = set_number;
		break;
	case 22:
		maze_wall->bit.B22 = set_number;
		break;
	case 23:
		maze_wall->bit.B23 = set_number;
		break;
	case 24:
		maze_wall->bit.B24 = set_number;
		break;
	case 25:
		maze_wall->bit.B25 = set_number;
		break;
	case 26:
		maze_wall->bit.B26 = set_number;
		break;
	case 27:
		maze_wall->bit.B27 = set_number;
		break;
	case 28:
		maze_wall->bit.B28 = set_number;
		break;
	case 29:
		maze_wall->bit.B29 = set_number;
		break;
	case 30:
		maze_wall->bit.B30 = set_number;
		break;
	case 31:
		maze_wall->bit.B31 = set_number;
		break;

	}
}
bool map::get_maze_wall(MAZE_WALL maze_wall, unsigned char edit_number) {
	unsigned char maze_check = 0;		//ÂÖÉFALSE

	switch (edit_number) {
	case 0:
		maze_check = maze_wall.bit.B0;
		break;
	case 1:
		maze_check = maze_wall.bit.B1;
		break;
	case 2:
		maze_check = maze_wall.bit.B2;
		break;
	case 3:
		maze_check = maze_wall.bit.B3;
		break;
	case 4:
		maze_check = maze_wall.bit.B4;
		break;
	case 5:
		maze_check = maze_wall.bit.B5;
		break;
	case 6:
		maze_check = maze_wall.bit.B6;
		break;
	case 7:
		maze_check = maze_wall.bit.B7;
		break;
	case 8:
		maze_check = maze_wall.bit.B8;
		break;
	case 9:
		maze_check = maze_wall.bit.B9;
		break;
	case 10:
		maze_check = maze_wall.bit.B10;
		break;
	case 11:
		maze_check = maze_wall.bit.B11;
		break;
	case 12:
		maze_check = maze_wall.bit.B12;
		break;
	case 13:
		maze_check = maze_wall.bit.B13;
		break;
	case 14:
		maze_check = maze_wall.bit.B14;
		break;
	case 15:
		maze_check = maze_wall.bit.B15;
		break;
	case 16:
		maze_check = maze_wall.bit.B16;
		break;
	case 17:
		maze_check = maze_wall.bit.B17;
		break;
	case 18:
		maze_check = maze_wall.bit.B18;
		break;
	case 19:
		maze_check = maze_wall.bit.B19;
		break;
	case 20:
		maze_check = maze_wall.bit.B20;
		break;
	case 21:
		maze_check = maze_wall.bit.B21;
		break;
	case 22:
		maze_check = maze_wall.bit.B22;
		break;
	case 23:
		maze_check = maze_wall.bit.B23;
		break;
	case 24:
		maze_check = maze_wall.bit.B24;
		break;
	case 25:
		maze_check = maze_wall.bit.B25;
		break;
	case 26:
		maze_check = maze_wall.bit.B26;
		break;
	case 27:
		maze_check = maze_wall.bit.B27;
		break;
	case 28:
		maze_check = maze_wall.bit.B28;
		break;
	case 29:
		maze_check = maze_wall.bit.B29;
		break;
	case 30:
		maze_check = maze_wall.bit.B30;
		break;
	case 31:
		maze_check = maze_wall.bit.B31;
		break;
	}

	if (maze_check == 0)
		return false;
	else
		return true;
}

void map::remember_exist(unsigned char wall_x, unsigned char wall_y,
		unsigned char muki) {
	unsigned char set_x = wall_x, set_y = wall_y;

	//xÂ∫ßÊ®ôÊñπÂêë„ÇíÂ§âÊõ¥„Åô„Çã„Å®„Å?
	if ((muki == MUKI_RIGHT) || (muki == MUKI_LEFT)) {
		if (muki == MUKI_RIGHT) {
		} else if (muki == MUKI_LEFT) {
			if (wall_x == 0) {		//‰∏?Áï™Â∑¶Â£Å„?ØÁÆ°Áê?„Åó„Å™„Å?
				return;
			} else {
				set_x = wall_x - 1;	//Âø?„ÅöÂè≥Â£Å„ÇíÊõ¥Êñ∞„Åô„Çã„Çà„ÅÜ„Å´„ÄÅÂ∫ßÊ®ô„ÇíÂ§â„Åà„Ç?
			}
		}
		if (set_x < MAZE_SIZE) {
			set_maze_wall(&x_wall_exist[set_y], set_x, true);//x_maze_wall[y]„ÅÆxÁï™ÁõÆ„ÅÆÂè≥Â£Å„Å´1„Çí‰ª£ÂÖ•
		} else {		//ÈÅ©Âà?„Åß„Å™„Å?ÂÄ§„ÅåÂ?•„Å£„Å¶„Ç?
			mouse::error();
			mouse::error();
			myprintf("\n\r!!!ERROR!!!\n\r");
			myprintf("Â≠òÂú®„Åó„Å™„ÅÑxÂ∫ßÊ®ô„Å´Â£Å„?ÆÂ≠òÂú®„Çí‰Ωú„Çç„Å?„Å®„Åó„Å¶„Å?„Åæ„Åô\n\r");
			myprintf("remember_existÈñ¢Êï∞ÂÜ?\n\r");
		}

		//yÂ∫ßÊ®ôÊñπÂêë„ÇíÂ§âÊõ¥„Åô„Çã„Å®„Å?
	} else if ((muki == MUKI_UP) || (muki == MUKI_DOWN)) {
		if (muki == MUKI_UP) {
		} else if (muki == MUKI_DOWN) {
			if (wall_y == 0) {		//‰∏?Áï™‰∏ãÂ£Å„?ØÁÆ°Áê?„Åó„Å™„Å?
				return;
			} else {
				set_y = wall_y - 1;	//Âø?„Åö‰∏äÂ£Å„ÇíÊõ¥Êñ∞„Åô„Çã„Çà„ÅÜ„Å´„ÄÅÂ∫ßÊ®ô„ÇíÂ§â„Åà„Ç?
			}
		}
		if (set_y < MAZE_SIZE) {
			set_maze_wall(&y_wall_exist[set_x], set_y, true);//x_maze_wall[y]„ÅÆxÁï™ÁõÆ„ÅÆÂè≥Â£Å„Å´1„Çí‰ª£ÂÖ•
		} else {		//ÈÅ©Âà?„Åß„Å™„Å?ÂÄ§„ÅåÂ?•„Å£„Å¶„Ç?
			mouse::error();
			myprintf("\n\r!!!ERROR!!!\n\r");
			myprintf("Â≠òÂú®„Åó„Å™„ÅÑyÂ∫ßÊ®ô„Å´Â£Å„?ÆÂ≠òÂú®„Çí‰Ωú„Çç„Å?„Å®„Åó„Å¶„Å?„Åæ„Åô\n\r");
			myprintf("remember_existÈñ¢Êï∞ÂÜ?\n\r");
		}

	}

}
void map::forget_exist(unsigned char wall_x, unsigned char wall_y,
		unsigned char muki) {
	unsigned char set_x = wall_x, set_y = wall_y;

	//xÂ∫ßÊ®ôÊñπÂêë„ÇíÂ§âÊõ¥„Åô„Çã„Å®„Å?
	if ((muki == MUKI_RIGHT) || (muki == MUKI_LEFT)) {
		if (muki == MUKI_RIGHT) {
		} else if (muki == MUKI_LEFT) {
			if (wall_x == 0) {		//‰∏?Áï™Â∑¶Â£Å„?ØÁÆ°Áê?„Åó„Å™„Å?
				return;
			} else {
				set_x = wall_x - 1;	//Âø?„ÅöÂè≥Â£Å„ÇíÊõ¥Êñ∞„Åô„Çã„Çà„ÅÜ„Å´„ÄÅÂ∫ßÊ®ô„ÇíÂ§â„Åà„Ç?
			}
		}
		if (set_x < MAZE_SIZE) {
			set_maze_wall(&x_wall_exist[set_y], set_x, false);//x_maze_wall[y]„ÅÆxÁï™ÁõÆ„ÅÆÂè≥Â£Å„Å´false„Çí‰ª£ÂÖ•
		} else {		//ÈÅ©Âà?„Åß„Å™„Å?ÂÄ§„ÅåÂ?•„Å£„Å¶„Ç?
			mouse::error();
			myprintf("\n\r!!!ERROR!!!\n\r");
			myprintf("Â≠òÂú®„Åó„Å™„ÅÑxÂ∫ßÊ®ô„?ÆÂ£Å„?ÆÂ≠òÂú®„ÇíÊ∂à„Åù„Å?„Å®„Åó„Å¶„Å?„Åæ„Åô\n\r");
			myprintf("forget_existÈñ¢Êï∞ÂÜ?\n\r");
		}

		//yÂ∫ßÊ®ôÊñπÂêë„ÇíÂ§âÊõ¥„Åô„Çã„Å®„Å?
	} else if ((muki == MUKI_UP) || (muki == MUKI_DOWN)) {
		if (muki == MUKI_UP) {
		} else if (muki == MUKI_DOWN) {
			if (wall_y == 0) {		//‰∏?Áï™‰∏ãÂ£Å„?ØÁÆ°Áê?„Åó„Å™„Å?
				return;
			} else {
				set_y = wall_y - 1;	//Âø?„Åö‰∏äÂ£Å„ÇíÊõ¥Êñ∞„Åô„Çã„Çà„ÅÜ„Å´„ÄÅÂ∫ßÊ®ô„ÇíÂ§â„Åà„Ç?
			}
		}
		if (set_y < MAZE_SIZE) {
			set_maze_wall(&y_wall_exist[set_x], set_y, false);//x_maze_wall[y]„ÅÆxÁï™ÁõÆ„ÅÆ‰∏äÂ£Å„Å´1false‰ª£ÂÖ•
		} else {		//ÈÅ©Âà?„Åß„Å™„Å?ÂÄ§„ÅåÂ?•„Å£„Å¶„Ç?
			mouse::error();
			myprintf("\n\r!!!ERROR!!!\n\r");
			myprintf("Â≠òÂú®„Åó„Å™„ÅÑyÂ∫ßÊ®ô„?ÆÂ£Å„?ÆÂ≠òÂú®„ÇíÊ∂à„Åù„Å?„Å®„Åó„Å¶„Å?„Åæ„Åô\n\r");
			myprintf("forget_existÈñ¢Êï∞ÂÜ?\n\r");
		}

	}

}
bool map::check_exist(unsigned char wall_x, unsigned char wall_y,
		unsigned char muki) {
	unsigned char target_x = wall_x, target_y = wall_y;

	//xÂ∫ßÊ®ôÊñπÂêë„ÇíË¶ã„Çã„Åô„Çã„Å®„Å?
	if ((muki == MUKI_RIGHT) || (muki == MUKI_LEFT)) {
		if (muki == MUKI_RIGHT) {
		} else if (muki == MUKI_LEFT) {
			if (wall_x == 0) {		//‰∏?Áï™Â∑¶Â£Å„?ØÁÆ°Áê?„Åó„Å™„Å?
				return true;
			} else {
				target_x = wall_x - 1;	//Âø?„ÅöÂè≥Â£Å„ÇíË¶ã„Çã„Çà„ÅÜ„Å´„ÄÅÂ∫ßÊ®ô„ÇíÂ§â„Åà„Ç?
			}
		}
		if (target_x < MAZE_SIZE) {
			return get_maze_wall(x_wall_exist[target_y], target_x);
		} else {		//ÈÅ©Âà?„Åß„Å™„Å?ÂÄ§„ÅåÂ?•„Å£„Å¶„Ç?
			mouse::error();
			myprintf("\n\r!!!ERROR!!!\n\r");
			myprintf("Â≠òÂú®„Åó„Å™„ÅÑxÂ∫ßÊ®ô„?ÆÂ£Å„?ÆÂ≠òÂú®„ÇíË™≠„ÇÇ„ÅÜ„Å®„Åó„Å¶„Å?„Åæ„Åô\n\r");
			myprintf("check_existÈñ¢Êï∞ÂÜ?\n\r");
			return false;
		}

		//yÂ∫ßÊ®ôÊñπÂêë„ÇíÂ§âÊõ¥„Åô„Çã„Å®„Å?
	} else if ((muki == MUKI_UP) || (muki == MUKI_DOWN)) {
		if (muki == MUKI_UP) {
		} else if (muki == MUKI_DOWN) {
			if (wall_y == 0) {		//‰∏?Áï™‰∏ãÂ£Å„?ØÂ∏∏„Å´Â£Å„ÅåÂ≠òÂú®
				return true;
			} else {
				target_y = wall_y - 1;	//Âø?„Åö‰∏äÂ£Å„ÇíÊõ¥Êñ∞„Åô„Çã„Çà„ÅÜ„Å´„ÄÅÂ∫ßÊ®ô„ÇíÂ§â„Åà„Ç?
			}
		}
		if (target_y < MAZE_SIZE) {
			return get_maze_wall(y_wall_exist[target_x], target_y);
		} else {		//ÈÅ©Âà?„Åß„Å™„Å?ÂÄ§„ÅåÂ?•„Å£„Å¶„Ç?
			mouse::error();
			myprintf("\n\r!!!ERROR!!!\n\r");
			myprintf("Â≠òÂú®„Åó„Å™„ÅÑyÂ∫ßÊ®ô„?ÆÂ£Å„?ÆÂ≠òÂú®„ÇíË™≠„ÇÇ„ÅÜ„Å®„Åó„Å¶„Å?„Åæ„Åô\n\r");
			myprintf("check_existÈñ¢Êï∞ÂÜ?\n\r");
			return false;
		}
	}

	return false;
}

bool map::check_exist(unsigned char wall_x, unsigned char wall_y, compas dir) {
	unsigned char target_x = wall_x, target_y = wall_y;

	//xÂ∫ßÊ®ôÊñπÂêë„ÇíË¶ã„Çã„Åô„Çã„Å®„Å?
	if ((dir == east) || (dir == west)) {
		if (dir == west) {
			if (wall_x == 0) {		//‰∏?Áï™Ë•øÂ£Å„?ØÁÆ°Áê?„Åó„Å™„Å?
				return true;
			} else {
				target_x = wall_x - 1;	//Âø?„ÅöÊù±Â£Å„ÇíË¶ã„Çã„Çà„ÅÜ„Å´„ÄÅÂ∫ßÊ®ô„ÇíÂ§â„Åà„Ç?
			}
		}
		if (target_x < MAZE_SIZE) {
			return get_maze_wall(x_wall_exist[target_y], target_x);
		} else {		//ÈÅ©Âà?„Åß„Å™„Å?ÂÄ§„ÅåÂ?•„Å£„Å¶„Ç?
			mouse::error();
			myprintf("\n\r!!!ERROR!!!\n\r");
			myprintf("Â≠òÂú®„Åó„Å™„ÅÑxÂ∫ßÊ®ô„?ÆÂ£Å„?ÆÂ≠òÂú®„ÇíË™≠„ÇÇ„ÅÜ„Å®„Åó„Å¶„Å?„Åæ„Åô\n\r");
			myprintf("check_existÈñ¢Êï∞ÂÜ?\n\r");
			return false;
		}

		//yÂ∫ßÊ®ôÊñπÂêë„ÇíÂ§âÊõ¥„Åô„Çã„Å®„Å?
	} else if ((dir == north) || (dir == south)) {
		if (dir == south) {
			if (wall_y == 0) {		//‰∏?Áï™ÂçóÂ£Å„?ØÂ∏∏„Å´Â£Å„ÅåÂ≠òÂú®
				return true;
			} else {
				target_y = wall_y - 1;	//Âø?„ÅöÂåóÂ£Å„ÇíÊõ¥Êñ∞„Åô„Çã„Çà„ÅÜ„Å´„ÄÅÂ∫ßÊ®ô„ÇíÂ§â„Åà„Ç?
			}
		}
		if (target_y < MAZE_SIZE) {
			return get_maze_wall(y_wall_exist[target_x], target_y);
		} else {		//ÈÅ©Âà?„Åß„Å™„Å?ÂÄ§„ÅåÂ?•„Å£„Å¶„Ç?
			mouse::error();
			myprintf("\n\r!!!ERROR!!!\n\r");
			myprintf("Â≠òÂú®„Åó„Å™„ÅÑyÂ∫ßÊ®ô„?ÆÂ£Å„?ÆÂ≠òÂú®„ÇíË™≠„ÇÇ„ÅÜ„Å®„Åó„Å¶„Å?„Åæ„Åô\n\r");
			myprintf("check_existÈñ¢Êï∞ÂÜ?\n\r");
			return false;
		}
	}

	return false;
}

void map::create_wall(unsigned char wall_x, unsigned char wall_y,
		unsigned char muki) {
	unsigned char set_x = wall_x, set_y = wall_y;

	//xÂ∫ßÊ®ôÊñπÂêë„ÇíÂ§âÊõ¥„Åô„Çã„Å®„Å?
	if ((muki == MUKI_RIGHT) || (muki == MUKI_LEFT)) {
		if (muki == MUKI_RIGHT) {
		} else if (muki == MUKI_LEFT) {
			if (wall_x == 0) {		//‰∏?Áï™Â∑¶Â£Å„?ØÁÆ°Áê?„Åó„Å™„Å?
				return;
			} else {
				set_x = wall_x - 1;	//Âø?„ÅöÂè≥Â£Å„ÇíÊõ¥Êñ∞„Åô„Çã„Çà„ÅÜ„Å´„ÄÅÂ∫ßÊ®ô„ÇíÂ§â„Åà„Ç?
			}
		}
		if (set_x < MAZE_SIZE) {
			set_maze_wall(&x_maze_wall[set_y], set_x, true);//x_maze_wall[y]„ÅÆxÁï™ÁõÆ„ÅÆÂè≥Â£Å„Å´1„Çí‰ª£ÂÖ•
		} else {		//ÈÅ©Âà?„Åß„Å™„Å?ÂÄ§„ÅåÂ?•„Å£„Å¶„Ç?
			mouse::error();
			myprintf("\n\r!!!ERROR!!!\n\r");
			myprintf("Â≠òÂú®„Åó„Å™„ÅÑxÂ∫ßÊ®ô„Å´Â£Å„Çí‰Ωú„Çç„Å?„Å®„Åó„Å¶„Å?„Åæ„Åô\n\r");
			myprintf("create_wallÈñ¢Êï∞ÂÜ?\n\r");
		}

		//yÂ∫ßÊ®ôÊñπÂêë„ÇíÂ§âÊõ¥„Åô„Çã„Å®„Å?
	} else if ((muki == MUKI_UP) || (muki == MUKI_DOWN)) {
		if (muki == MUKI_UP) {
		} else if (muki == MUKI_DOWN) {
			if (wall_y == 0) {		//‰∏?Áï™‰∏ãÂ£Å„?ØÁÆ°Áê?„Åó„Å™„Å?
				return;
			} else {
				set_y = wall_y - 1;	//Âø?„Åö‰∏äÂ£Å„ÇíÊõ¥Êñ∞„Åô„Çã„Çà„ÅÜ„Å´„ÄÅÂ∫ßÊ®ô„ÇíÂ§â„Åà„Ç?
			}
		}
		if (set_y < MAZE_SIZE) {
			set_maze_wall(&y_maze_wall[set_x], set_y, true);//x_maze_wall[y]„ÅÆxÁï™ÁõÆ„ÅÆÂè≥Â£Å„Å´1„Çí‰ª£ÂÖ•
		} else {		//ÈÅ©Âà?„Åß„Å™„Å?ÂÄ§„ÅåÂ?•„Å£„Å¶„Ç?
			mouse::error();
			myprintf("\n\r!!!ERROR!!!\n\r");
			myprintf("Â≠òÂú®„Åó„Å™„ÅÑyÂ∫ßÊ®ô„Å´Â£Å„Çí‰Ωú„Çç„Å?„Å®„Åó„Å¶„Å?„Åæ„Åô\n\r");
			myprintf("create_wallÈñ¢Êï∞ÂÜ?\n\r");
		}

	}

}
void map::destroy_wall(unsigned char wall_x, unsigned char wall_y,
		unsigned char muki) {
	unsigned char set_x = wall_x, set_y = wall_y;

	//xÂ∫ßÊ®ôÊñπÂêë„ÇíÂ§âÊõ¥„Åô„Çã„Å®„Å?
	if ((muki == MUKI_RIGHT) || (muki == MUKI_LEFT)) {
		if (muki == MUKI_RIGHT) {
		} else if (muki == MUKI_LEFT) {
			if (wall_x == 0) {		//‰∏?Áï™Â∑¶Â£Å„?ØÁÆ°Áê?„Åó„Å™„Å?
				return;
			} else {
				set_x = wall_x - 1;	//Âø?„ÅöÂè≥Â£Å„ÇíÊõ¥Êñ∞„Åô„Çã„Çà„ÅÜ„Å´„ÄÅÂ∫ßÊ®ô„ÇíÂ§â„Åà„Ç?
			}
		}
		if (set_x < MAZE_SIZE) {
			set_maze_wall(&x_maze_wall[set_y], set_x, false);//x_maze_wall[y]„ÅÆxÁï™ÁõÆ„ÅÆÂè≥Â£Å„Å´false„Çí‰ª£ÂÖ•
		} else {		//ÈÅ©Âà?„Åß„Å™„Å?ÂÄ§„ÅåÂ?•„Å£„Å¶„Ç?
			mouse::error();
			myprintf("\n\r!!!ERROR!!!\n\r");
			myprintf("Â≠òÂú®„Åó„Å™„ÅÑxÂ∫ßÊ®ô„?ÆÂ£Å„ÇíÂ£ä„Åù„Å?„Å®„Åó„Å¶„Å?„Åæ„Åô\n\r");
			myprintf("destroy_wallÈñ¢Êï∞ÂÜ?\n\r");
		}

		//yÂ∫ßÊ®ôÊñπÂêë„ÇíÂ§âÊõ¥„Åô„Çã„Å®„Å?
	} else if ((muki == MUKI_UP) || (muki == MUKI_DOWN)) {
		if (muki == MUKI_UP) {
		} else if (muki == MUKI_DOWN) {
			if (wall_y == 0) {		//‰∏?Áï™‰∏ãÂ£Å„?ØÁÆ°Áê?„Åó„Å™„Å?
				return;
			} else {
				set_y = wall_y - 1;	//Âø?„Åö‰∏äÂ£Å„ÇíÊõ¥Êñ∞„Åô„Çã„Çà„ÅÜ„Å´„ÄÅÂ∫ßÊ®ô„ÇíÂ§â„Åà„Ç?
			}
		}
		if (set_y < MAZE_SIZE) {
			set_maze_wall(&y_maze_wall[set_x], set_y, false);//x_maze_wall[y]„ÅÆxÁï™ÁõÆ„ÅÆ‰∏äÂ£Å„Å´1false‰ª£ÂÖ•
		} else {		//ÈÅ©Âà?„Åß„Å™„Å?ÂÄ§„ÅåÂ?•„Å£„Å¶„Ç?
			mouse::error();
			myprintf("\n\r!!!ERROR!!!\n\r");
			myprintf("Â≠òÂú®„Åó„Å™„ÅÑyÂ∫ßÊ®ô„?ÆÂ£Å„ÇíÂ£ä„Åù„Å?„Å®„Åó„Å¶„Å?„Åæ„Åô\n\r");
			myprintf("destroy_wallÈñ¢Êï∞ÂÜ?\n\r");
		}

	}

}
bool map::get_wall(unsigned char wall_x, unsigned char wall_y,
		unsigned char muki) {
	unsigned char target_x = wall_x, target_y = wall_y;

	//xÂ∫ßÊ®ôÊñπÂêë„ÇíË¶ã„Çã„Åô„Çã„Å®„Å?
	if ((muki == MUKI_RIGHT) || (muki == MUKI_LEFT)) {
		if (muki == MUKI_RIGHT) {
		} else if (muki == MUKI_LEFT) {
			if (wall_x == 0) {		//‰∏?Áï™Â∑¶Â£Å„?ØÁÆ°Áê?„Åó„Å™„Å?
				return true;
			} else {
				target_x = wall_x - 1;	//Âø?„ÅöÂè≥Â£Å„ÇíË¶ã„Çã„Çà„ÅÜ„Å´„ÄÅÂ∫ßÊ®ô„ÇíÂ§â„Åà„Ç?
			}
		}
		if (target_x < MAZE_SIZE) {
			return get_maze_wall(x_maze_wall[target_y], target_x);
		} else {		//ÈÅ©Âà?„Åß„Å™„Å?ÂÄ§„ÅåÂ?•„Å£„Å¶„Ç?
			mouse::error();
			myprintf("\n\r!!!ERROR!!!\n\r");
			myprintf("Â≠òÂú®„Åó„Å™„ÅÑxÂ∫ßÊ®ô„?ÆÂ£Å„ÇíË™≠„ÇÇ„ÅÜ„Å®„Åó„Å¶„Å?„Åæ„Å?->%d\n\r", target_x);
			myprintf("get_wallÈñ¢Êï∞ÂÜ?\n\r");
			return false;
		}

		//yÂ∫ßÊ®ôÊñπÂêë„ÇíÂ§âÊõ¥„Åô„Çã„Å®„Å?
	} else if ((muki == MUKI_UP) || (muki == MUKI_DOWN)) {
		if (muki == MUKI_UP) {
		} else if (muki == MUKI_DOWN) {
			if (wall_y == 0) {		//‰∏?Áï™‰∏ãÂ£Å„?ØÂ∏∏„Å´Â£Å„ÅåÂ≠òÂú®
				return true;
			} else {
				target_y = wall_y - 1;	//Âø?„Åö‰∏äÂ£Å„ÇíÊõ¥Êñ∞„Åô„Çã„Çà„ÅÜ„Å´„ÄÅÂ∫ßÊ®ô„ÇíÂ§â„Åà„Ç?
			}
		}
		if (target_y < MAZE_SIZE) {
			return get_maze_wall(y_maze_wall[target_x], target_y);
		} else {		//ÈÅ©Âà?„Åß„Å™„Å?ÂÄ§„ÅåÂ?•„Å£„Å¶„Ç?
			mouse::error();
			myprintf("\n\r!!!ERROR!!!\n\r");
			myprintf("Â≠òÂú®„Åó„Å™„ÅÑyÂ∫ßÊ®ô„?ÆÂ£Å„ÇíË™≠„ÇÇ„ÅÜ„Å®„Åó„Å¶„Å?„Åæ„Å?->%d\n\r", target_y);
			myprintf("get_wallÈñ¢Êï∞ÂÜ?\n\r");
			return false;
		}
	}

	return false;
}

void map::reset_maze() {
	//Â£Å„ÇíÊ∂à„Åô
	for (int i = 0; i < MAZE_SIZE; i++) {
		x_maze_wall[i].all = 0;
		y_maze_wall[i].all = 0;
		x_wall_exist[i].all = 0;
		y_wall_exist[i].all = 0;
	}
	//Â§ñÂ£Å„?ØÂÖ•„Çå„Çã
	for (int i = 0; i < MAZE_SIZE; i++) {
		create_wall(0, i, MUKI_LEFT);
		remember_exist(0, i, MUKI_LEFT);
		create_wall(MAZE_SIZE - 1, i, MUKI_RIGHT);
		remember_exist(MAZE_SIZE - 1, i, MUKI_RIGHT);
		create_wall(i, 0, MUKI_DOWN);
		remember_exist(i, 0, MUKI_DOWN);
		create_wall(i, MAZE_SIZE - 1, MUKI_UP);
		remember_exist(i, MAZE_SIZE - 1, MUKI_UP);
	}
	//(0?º?0)„ÅØ„Çè„Åã„Å£„Å¶„Ç?
	create_wall(0, 0, MUKI_RIGHT);
	remember_exist(0, 0, MUKI_RIGHT);
	destroy_wall(0, 0, MUKI_UP);
	remember_exist(0, 0, MUKI_UP);
}

void map::draw_map(bool write_step) {
	signed char tekitou_x = 0, tekitou_y = MAZE_SIZE - 1;

	myprintf("\n-----start draw_map-------\n\r");

	//‰∏äËæ∫
	for (tekitou_x = 0; tekitou_x < MAZE_SIZE; tekitou_x++)
		myprintf("+---");
	myprintf("+\n\r");

	myprintf("|");	//Â∑¶Á´Ø„ÅÆÂ£?
	for (tekitou_x = 0; tekitou_x < MAZE_SIZE - 1; tekitou_x++) {

		if (write_step)
			myprintf("%3d", step::get_step(tekitou_x, tekitou_y));
		else
			myprintf("   ");

		if ((get_wall(tekitou_x, tekitou_y, MUKI_RIGHT) == true)
				|| (get_wall(tekitou_x + 1, tekitou_y, MUKI_LEFT) == true)) {//‰ªäÊõ∏„Å?„Åü„?û„Çπ„ÅÆÂè≥„ÅÆÂ£Å„Åå„ÅÇ„Çå„Å∞Â£Å„ÇíÊõ∏„Å?
			myprintf("|");
		} else {
			myprintf(" ");	//„Å™„Åë„Çå„Å∞Â£Å„?ØÊõ∏„Åã„Å™„Å?
		}
	}

	if (write_step)
		myprintf("%3d", step::get_step(tekitou_x, tekitou_y));
	else
		myprintf("   ");

	myprintf("|\n\r");	//Âè≥Á´Ø„ÅÆÂ£?

	for (tekitou_y = MAZE_SIZE - 2; tekitou_y >= 0; tekitou_y--) {
		//////////////////////////////////////////Ëø∑Ë∑Ø„ÅÆÂ£Å„?ÆË°?
		for (tekitou_x = 0; tekitou_x < MAZE_SIZE; tekitou_x++) {
			myprintf("+");	//Êü±
			if ((get_wall(tekitou_x, tekitou_y, MUKI_UP) == true)
					|| (get_wall(tekitou_x, tekitou_y + 1, MUKI_DOWN) == true)) {//Â£Å„Åå„ÅÇ„Çã„Å™„Ç?
				myprintf("---");
			} else {
				myprintf("   ");
			}
		}
		myprintf("+\n\r");

		/////////////////////////////////////////Ëø∑Ë∑Ø„ÅÆ„Éû„ÇπÁõÆ„ÅÆË°?
		myprintf("|");	//Â∑¶Á´Ø„ÅÆÂ£?
		for (tekitou_x = 0; tekitou_x < MAZE_SIZE - 1; tekitou_x++) {

			if (write_step)
				myprintf("%3d", step::get_step(tekitou_x, tekitou_y));
			else
				myprintf("   ");

			if ((get_wall(tekitou_x, tekitou_y, MUKI_RIGHT) == true)
					|| (get_wall(tekitou_x + 1, tekitou_y, MUKI_LEFT) == true)) {//‰ªäÊõ∏„Å?„Åü„?û„Çπ„ÅÆÂè≥„ÅÆÂ£Å„Åå„ÅÇ„Çå„Å∞Â£Å„ÇíÊõ∏„Å?
				myprintf("|");
			} else {
				myprintf(" ");	//„Å™„Åë„Çå„Å∞Â£Å„?ØÊõ∏„Åã„Å™„Å?
			}
		}
		if (write_step)
			myprintf("%3d", step::get_step(tekitou_x, tekitou_y));
		else
			myprintf("   ");

		myprintf("|\n\r");	//Âè≥Á´Ø„ÅÆÂ£?
	}

	//‰∏ãËæ∫
	for (tekitou_x = 0; tekitou_x < MAZE_SIZE; tekitou_x++)
		myprintf("+---");
	myprintf("+\n\r");

}

/*
 void map::convert_mapdata(unsigned char (*hiramatu_data)[16]){
 for(char x=0;x<16;x++){
 for(char y=0;y<16;y++){
 if((hiramatu_data[x][y] & 2) == 2){		//Êù±Â£Å„Åå„ÅÇ„Çå„Å∞
 create_wall(x,y,MUKI_RIGHT);
 }else{
 destroy_wall(x,y,MUKI_RIGHT);
 }
 if((hiramatu_data[x][y] & 1) == 1){		//ÂçóÂ£Å„Åå„ÅÇ„Çå„Å∞
 create_wall(x,y,MUKI_UP);
 }else{
 destroy_wall(x,y,MUKI_UP);
 }
 }
 }
 }
 */

void map::input_map_data(const MAP_DATA *input_data) {
	//„É?„Éº„ÇøÂÖ•Âä?
	for (int i = 0; i < MAZE_SIZE; i++) {
		x_maze_wall[i].all = input_data->x_wall[i].all;
		y_maze_wall[i].all = input_data->y_wall[i].all;
		x_wall_exist[i].all = input_data->x_known[i].all;
		y_wall_exist[i].all = input_data->y_known[i].all;
	}
}

void map::output_map_data(MAP_DATA* output_data) {
	//„É?„Éº„ÇøÂá∫Âä?
	for (int i = 0; i < MAZE_SIZE; i++) {
		output_data->x_wall[i].all = x_maze_wall[i].all;
		output_data->y_wall[i].all = y_maze_wall[i].all;
		output_data->x_known[i].all = x_wall_exist[i].all;
		output_data->y_known[i].all = y_wall_exist[i].all;
	}
}

map::map() {
	reset_maze();
}

map::~map() {

}

DIRECTION step::save_direction;
unsigned short step::maze_step[MAZE_SIZE][MAZE_SIZE];

void step::step_reset() {
	for (int i = 0; i < MAZE_SIZE; i++) {
		for (int j = 0; j < MAZE_SIZE; j++) {
			maze_step[i][j] = STEP_INIT;
		}
	}
}
/*
 void step::set_step(unsigned char target_x, unsigned char target_y) {
 //Â∫ßÊ®ô„ÇíÁÆ°Áê?„Åô„Çã„Åü„ÇÅ„ÅÆÈÖçÂ??
 unsigned char x_coordinate[965];
 unsigned char y_coordinate[965];

 //array[x]={0};„Å£„Å¶„Ç?„Çã„Å®„É°„É¢„É™È£ü„ÅÜ„Çâ„Åó„Å?„ÅÆ„ÅßFor„ÅßÂàùÊúüÂå?
 for (int16_t i = 0; i < 965; i++) {
 x_coordinate[i] = 0;
 y_coordinate[i] = 0;
 }

 unsigned char x_count = 0, y_count = 0;	//‰∏?ÊôÇÁöÑ„Å´Â∫ßÊ®ô„Çí„ÇÇ„Å£„Å®„Åè„Çà„Å?
 unsigned char head, tail;		//
 uint16_t now_step;

 step_reset();
 maze_step[target_x][target_y] = 0;

 //coordinate  [tail][][][] -> [][][head]

 head = 1;
 tail = 0;

 //Q„ÅÆÊú?Âàù„Å´„ÅØÁõÆÊ®ô„?ÆÂ∫ßÊ®ô„ÇíÂÖ•„Çå„Å®„Å?
 x_coordinate[tail] = target_x;
 y_coordinate[tail] = target_y;

 while (head != tail) {
 //Â∫ßÊ®ô„Çí‰ª£ÂÖ•
 x_count = x_coordinate[tail];
 y_count = y_coordinate[tail];
 now_step = maze_step[x_count][y_count];

 tail++;

 //Â∑¶„Éû„Çπ
 if (set_step(x_count, y_count, MUKI_LEFT, now_step + 1, false)) {
 //„Åì„?ÆÂ∫ßÊ®ô„Çí‰øùÊåÅ
 x_coordinate[head] = (x_count - 1);
 y_coordinate[head] = y_count;
 head++;
 }

 //Âè≥„Éû„Çπ
 if (set_step(x_count, y_count, MUKI_RIGHT, now_step + 1, false)) {
 //„Åì„?ÆÂ∫ßÊ®ô„Çí‰øùÊåÅ
 x_coordinate[head] = (x_count + 1);
 y_coordinate[head] = y_count;
 head++;
 }

 //‰∏ã„?û„Çπ
 if (set_step(x_count, y_count, MUKI_DOWN, now_step + 1, false)) {
 //„Åì„?ÆÂ∫ßÊ®ô„Çí‰øùÊåÅ
 x_coordinate[head] = x_count;
 y_coordinate[head] = y_count - 1;
 head++;
 }

 //‰∏ä„?û„Çπ
 if (set_step(x_count, y_count, MUKI_UP, now_step + 1, false)) {
 //„Åì„?ÆÂ∫ßÊ®ô„Çí‰øùÊåÅ
 x_coordinate[head] = x_count;
 y_coordinate[head] = y_count + 1;
 head++;
 }

 if (head > 965) {		//ÈÖçÂ?óË∂ä„Åà„Åü„Çâ„Ç®„É©„Éº
 myprintf("„Ç®„É©„Éº!\n\radachi::set_step()ÂÜ?\n\r");
 break;
 }

 }

 }


 void step::set_step_by_known(unsigned char target_x, unsigned char target_y) {
 //Â∫ßÊ®ô„ÇíÁÆ°Áê?„Åô„Çã„Åü„ÇÅ„ÅÆÈÖçÂ??
 unsigned char x_coordinate[965];
 unsigned char y_coordinate[965];

 //array[x]={0};„Å£„Å¶„Ç?„Çã„Å®„É°„É¢„É™È£ü„ÅÜ„Çâ„Åó„Å?„ÅÆ„ÅßFor„ÅßÂàùÊúüÂå?
 for (int16_t i = 0; i < 965; i++) {
 x_coordinate[i] = 0;
 y_coordinate[i] = 0;
 }

 unsigned char x_count = 0, y_count = 0;	//‰∏?ÊôÇÁöÑ„Å´Â∫ßÊ®ô„Çí„ÇÇ„Å£„Å®„Åè„Çà„Å?
 unsigned char head, tail;		//

 step_reset();
 maze_step[target_x][target_y] = 0;

 //coordinate  [tail][][][] -> [][][head]

 head = 1;
 tail = 0;

 //Q„ÅÆÊú?Âàù„Å´„ÅØÁõÆÊ®ô„?ÆÂ∫ßÊ®ô„ÇíÂÖ•„Çå„Å®„Å?
 x_coordinate[tail] = target_x;
 y_coordinate[tail] = target_y;

 while (head != tail) {
 //Â∫ßÊ®ô„Çí‰ª£ÂÖ•
 x_count = x_coordinate[tail];
 y_count = y_coordinate[tail];

 tail++;

 //Â∑¶„Éû„Çπ
 if ((x_count - 1) >= 0) {		//Â∫ßÊ®ô„ÅåËø∑Ë∑ØÂÜ?(x-1„Å?0‰ª•‰∏?)„Å´„ÅÇ„Çä
 if ((maze_step[x_count - 1][y_count] == STEP_INIT)) {//Ê≠©Êï∞„ÇíÂ?•„Çå„Å¶„Å™„Å?ºàÂ?•„Å£„Å¶„ÇãÊ≠©Êï∞„ÅåSTEP_INIT?º?
 if (map::get_wall(x_count, y_count, MUKI_LEFT) == false) {//ÂÖ?„ÅÆ„Éû„Çπ„ÅÆÂ∑¶Â£Å„Åå„Å™„Å?„Å™„Ç?
 if (map::check_exist(x_count, y_count,
 MUKI_LEFT)) {		//Â∑¶Â£Å„ÇíË¶ã„Å¶„Å?„Çã„Å™„Ç?
 maze_step[x_count - 1][y_count] =
 maze_step[x_count][y_count] + 1;		//Ê≠©Êï∞„Çí‰ª£ÂÖ•
 //„Åì„?ÆÂ∫ßÊ®ô„Çí‰øùÊåÅ
 x_coordinate[head] = (x_count - 1);
 y_coordinate[head] = y_count;
 head++;
 }
 }
 }
 }

 //Âè≥„Éû„Çπ
 if ((x_count + 1) < MAZE_SIZE) {	//Â∫ßÊ®ô„ÅåËø∑Ë∑ØÂÜ?(x+1„ÅåMAZE_SIZEÊú™Ê∫?)„Å´„ÅÇ„Çä
 if ((maze_step[x_count + 1][y_count] == STEP_INIT)) {//Ê≠©Êï∞„ÇíÂ?•„Çå„Å¶„Å™„Å?ºàÂ?•„Å£„Å¶„ÇãÊ≠©Êï∞„ÅåSTEP_INIT?º?
 if (map::get_wall(x_count, y_count, MUKI_RIGHT) == false) {	//ÂÖ?„ÅÆ„Éû„Çπ„ÅÆÂè≥Â£Å„Åå„Å™„Å?
 if (map::check_exist(x_count, y_count,
 MUKI_RIGHT)) {	//Âè≥Â£Å„ÇíË¶ã„Å¶„Å?„Çã„Å™„Ç?
 maze_step[x_count + 1][y_count] =
 maze_step[x_count][y_count] + 1;	//Ê≠©Êï∞„Çí‰ª£ÂÖ•
 //„Åì„?ÆÂ∫ßÊ®ô„Çí‰øùÊåÅ
 x_coordinate[head] = (x_count + 1);
 y_coordinate[head] = y_count;
 head++;
 }
 }
 }
 }

 //‰∏ã„?û„Çπ
 if ((y_count - 1) >= 0) {		//Â∫ßÊ®ô„ÅåËø∑Ë∑ØÂÜ?(y-1„Å?0‰ª•‰∏?)„Å´„ÅÇ„Çä
 if ((maze_step[x_count][y_count - 1] == STEP_INIT)) {//Ê≠©Êï∞„ÇíÂ?•„Çå„Å¶„Å™„Å?ºàÂ?•„Å£„Å¶„ÇãÊ≠©Êï∞„ÅåSTEP_INIT?º?
 if (map::get_wall(x_count, y_count, MUKI_DOWN) == false) {//ÂÖ?„ÅÆ„Éû„Çπ„ÅÆ‰∏ãÂ£Å„Åå„Å™„Å?
 if (map::check_exist(x_count, y_count,
 MUKI_DOWN)) {		//‰∏ãÂ£Å„ÅåÊó¢Áü•„Å™„Ç?
 maze_step[x_count][y_count - 1] =
 maze_step[x_count][y_count] + 1;	//Ê≠©Êï∞„Çí‰ª£ÂÖ•
 //„Åì„?ÆÂ∫ßÊ®ô„Çí‰øùÊåÅ
 x_coordinate[head] = x_count;
 y_coordinate[head] = (y_count - 1);
 head++;
 }
 }
 }
 }

 //‰∏ä„?û„Çπ
 if ((y_count + 1) < MAZE_SIZE) {	//x,y+1„ÅÆÂ∫ßÊ®ô„ÅåËø∑Ë∑ØÂÜ?(MAZE_SIZEÊú™Ê∫?)„Åß„ÅÇ„Çã
 if ((maze_step[x_count][y_count + 1] == STEP_INIT)) {//Ê≠©Êï∞„ÇíÂ?•„Çå„Å¶„Å™„Å?ºàÂ?•„Å£„Å¶„ÇãÊ≠©Êï∞„ÅåSTEP_INIT?º?
 if (map::get_wall(x_count, y_count, MUKI_UP) == false) {//ÂÖ?„ÅÆ„Éû„Çπ„ÅÆ‰∏äÂ£Å„Åå„Å™„Å?
 if (map::check_exist(x_count, y_count,
 MUKI_UP)) {		//‰∏äÂ£Å„ÅåÊó¢Áü•„Å™„Ç?
 maze_step[x_count][y_count + 1] =
 maze_step[x_count][y_count] + 1;	//Ê≠©Êï∞„Çí‰ª£ÂÖ•
 //„Åì„?ÆÂ∫ßÊ®ô„Çí‰øùÊåÅ
 x_coordinate[head] = x_count;
 y_coordinate[head] = (y_count + 1);
 head++;
 }
 }
 }
 }

 if (head > 965) {		//ÈÖçÂ?óË∂ä„Åà„Åü„Çâ„Ç®„É©„Éº
 myprintf("„Ç®„É©„Éº!\n\radachi::set_step()ÂÜ?\n\r");
 break;
 }

 }

 }
 */
void step::spread_step(uint8_t tar_x, uint8_t tar_y, bool by_known) {
	uint8_t x, y;	//‰∏?ÊôÇÁöÑ„Å´Â∫ßÊ®ô„Çí„ÇÇ„Å£„Å®„Åè„Çà„Å?
	uint16_t now_step;
	loop = 0;

	//Â∫ßÊ®ô‰øùÂ≠òÁî®Queue
	static my_queue x_que;
	static my_queue y_que;

	step_reset();

	maze_step[tar_x][tar_y] = 0;
	//Q„ÅÆÊú?Âàù„Å´„ÅØÁõÆÊ®ô„?ÆÂ∫ßÊ®ô„ÇíÂÖ•„Çå„Å®„Å?
	x_que.push(tar_x);
	y_que.push(tar_y);

	while (x_que.size() != 0) {		//x„ÇÇy„ÇÇ„Çµ„Ç§„Ç∫„ÅØÂêå„Åò„Å™„ÅÆ„Åß‰ª£Ë°®„Åó„Å¶x„Çí‰Ωø„Å?
		loop++;
		//Â∫ßÊ®ô„Çí‰ª£ÂÖ•
		x = x_que.front();
		y = y_que.front();
		x_que.pop();		//Âèñ„ÇäÂá∫„Åó„Åü„ÅÆ„ÅßÊ∂àÂéª
		y_que.pop();		//Âèñ„ÇäÂá∫„Åó„Åü„ÅÆ„ÅßÊ∂àÂéª
		now_step = maze_step[x][y];

		//Â∑¶„Éû„Çπ
		if (set_step(x, y, MUKI_LEFT, now_step + 1, by_known)) {	//Êõ∏„ÅçËæº„ÇÅ„Åü„Å™„Ç?
			x_que.push(x - 1);		//„Åì„?ÆÂ∫ßÊ®ô„Çí‰øùÊåÅ
			y_que.push(y);		//„Åì„?ÆÂ∫ßÊ®ô„Çí‰øùÊåÅ
		}
		//Âè≥„Éû„Çπ
		if (set_step(x, y, MUKI_RIGHT, now_step + 1, by_known)) {	//Êõ∏„ÅçËæº„ÇÅ„Åü„Å™„Ç?
			x_que.push(x + 1);		//„Åì„?ÆÂ∫ßÊ®ô„Çí‰øùÊåÅ
			y_que.push(y);		//„Åì„?ÆÂ∫ßÊ®ô„Çí‰øùÊåÅ
		}
		//Âåó„?û„Çπ
		if (set_step(x, y, MUKI_UP, now_step + 1, by_known)) {	//Êõ∏„ÅçËæº„ÇÅ„Åü„Å™„Ç?
			x_que.push(x);		//„Åì„?ÆÂ∫ßÊ®ô„Çí‰øùÊåÅ
			y_que.push(y + 1);		//„Åì„?ÆÂ∫ßÊ®ô„Çí‰øùÊåÅ
		}
		//Âçó„?û„Çπ
		if (set_step(x, y, MUKI_DOWN, now_step + 1, by_known)) {	//Êõ∏„ÅçËæº„ÇÅ„Åü„Å™„Ç?
			x_que.push(x);		//„Åì„?ÆÂ∫ßÊ®ô„Çí‰øùÊåÅ
			y_que.push(y - 1);		//„Åì„?ÆÂ∫ßÊ®ô„Çí‰øùÊåÅ
		}
	}

}

bool step::set_step(uint8_t _x, uint8_t _y, uint8_t _muki, uint8_t _set_step,
		bool _by_known) {

	int8_t dx, dy;
	switch (_muki) {
	case MUKI_UP:
		dx = 0;
		dy = 1;
		break;
	case MUKI_DOWN:
		dx = 0;
		dy = -1;
		break;
	case MUKI_LEFT:
		dx = -1;
		dy = 0;
		break;
	case MUKI_RIGHT:
		dx = 1;
		dy = 0;
		break;
	}

//ÈÖçÂ?óÂ§ñ„Å´Âá∫„Çã„Éë„Çø„Éº„É≥„ÇíÈô§Â§?
	if (static_cast<int16_t>(_x) + dx < 0)
		return false;
	if (static_cast<int16_t>(_x) + dx >= MAZE_SIZE)
		return false;
	if (static_cast<int16_t>(_y) + dy < 0)
		return false;
	if (static_cast<int16_t>(_y) + dy >= MAZE_SIZE)
		return false;

	if ((maze_step[_x + dx][_y + dy] > _set_step)) {	//ÂÖ•„Å£„Å¶„ÇãÊ≠©Êï∞„ÅåÂ?•„Çå„Çà„Å?„Å®„Åô„ÇãÊ≠©Êï∞„Çà„ÇäÂ§ß„Åç„ÅÑ
		if (!map::get_wall(_x, _y, _muki)) {	//Â£Å„Åå„Å™„Å?
			if (!_by_known || map::check_exist(_x, _y, _muki)) {	//Âè≥Â£Å„ÇíË¶ã„Å¶„Å?„Çã„Å™„Ç?
				maze_step[_x + dx][_y + dy] = _set_step;	//Ê≠©Êï∞„Çí‰ª£ÂÖ•
				return true;	//Ê≠©Êï∞„ÇíÊõ∏„ÅçËæº„ÇÅ„Åü„ÅÆ„Åßtrue„ÇíËøî„Åô
			}
		}
	}
	return false;

}

unsigned int step::get_step(unsigned char target_x, unsigned char target_y) {
	return maze_step[target_x][target_y];
}

void step::close_one_dead_end(unsigned char target_x, unsigned char target_y) {
	union {
		unsigned char all;				//‰∏?Êã¨
		struct {
			unsigned char count :4;		//		Ë°å„Åë„Å™„Å?ÊñπÂêë„?ÆÂÄãÊï∞
			unsigned char up :1;		//‚Ü?	x=0,y=1„ÅÆÊñπÂê?
			unsigned char down :1;		//‚Ü?	x=0,y=-1„ÅÆÊñπÂê?
			unsigned char left :1;		//‚Ü?	x=-1,y=0„ÅÆÊñπÂê?
			unsigned char right :1;		//‚Ü?	x=1,y=0„ÅÆÊñπÂê?
		} direction;
	} dead_end;

	dead_end.all = 0;	//ÂàùÊúüÂå?

//Â∑¶„Éû„Çπ
	if ((map::get_wall(target_x, target_y, MUKI_LEFT))) {	//Â∑¶Â£Å„Åå„ÅÇ„Çã„Å™„Ç?
		dead_end.direction.left = 1;	//Â∑¶„Éï„É©„Ç∞„ÇíÂª∫„Å¶„Ç?
		dead_end.direction.count++;	//1Ë∂≥„Å?
	} else if ((target_x - 1) >= 0) {		//Â∫ßÊ®ô„ÅåËø∑Ë∑ØÂÜ?(x-1„Å?0‰ª•‰∏?)„Å´„ÅÇ„Çä
		if ((maze_step[target_x - 1][target_y] == STEP_INIT)
				|| (map::check_exist(target_x, target_y, MUKI_LEFT) == false)) {//Â∑¶„ÅÆ„Éû„Çπ„Å´Ë°å„Åë„Å™„Å?ºàÂ?•„Å£„Å¶„ÇãÊ≠©Êï∞„Å?255 „Åæ„Åü„?Ø ?º?
			dead_end.direction.left = 1;		//Â∑¶„Éï„É©„Ç∞„Ç™„É≥
			dead_end.direction.count++;		//1Ë∂≥„Å?
		}
	}

//Âè≥„Éû„Çπ
	if ((map::get_wall(target_x, target_y, MUKI_RIGHT))) {		//Âè≥Â£Å„Åå„ÅÇ„Çã„Å™„Ç?
		dead_end.direction.right = 1;		//Âè≥„Éï„É©„Ç∞„ÇíÂª∫„Å¶„Ç?
		dead_end.direction.count++;		//1Ë∂≥„Å?
	} else if ((target_x + 1) < MAZE_SIZE) {		//Â∫ßÊ®ô„ÅåËø∑Ë∑ØÂÜ?(x+1„ÅåMax_xÊú™Ê∫?)„Å´„ÅÇ„Çä
		if ((maze_step[target_x + 1][target_y] == STEP_INIT)
				|| (map::check_exist(target_x, target_y, MUKI_RIGHT) == false)) {//Âè≥„ÅÆ„Éû„Çπ„Å´Ë°å„Åë„Å™„Å?ºàÂ?•„Å£„Å¶„ÇãÊ≠©Êï∞„Å?255 „Åæ„Åü„?Ø Â£Å„Åå„ÅÇ„Çã?º?
			dead_end.direction.right = 1;		//Âè≥„Éï„É©„Ç∞„ÇíÂª∫„Å¶„Ç?
			dead_end.direction.count++;		//1Ë∂≥„Å?
		}
	}

//‰∏ã„?û„Çπ
	if ((map::get_wall(target_x, target_y, MUKI_DOWN))) {		//‰∏ãÂ£Å„Åå„ÅÇ„Çã„Å™„Ç?
		dead_end.direction.down = 1;		//‰∏ã„Éï„É©„Ç∞„ÇíÂª∫„Å¶„Ç?
		dead_end.direction.count++;		//1Ë∂≥„Å?
	} else if ((target_y - 1 >= 0)) {		//Â∫ßÊ®ô„ÅåËø∑Ë∑ØÂÜ?(y-1„Å?0‰ª•‰∏?)„Å´„ÅÇ„Çä
		if ((maze_step[target_x][target_y - 1] == STEP_INIT)
				|| (map::check_exist(target_x, target_y, MUKI_DOWN) == false)) {//‰∏ã„?Æ„Éû„Çπ„Å´Ë°å„Åë„Å™„Å?ºàÂ?•„Å£„Å¶„ÇãÊ≠©Êï∞„Å?255 „Åæ„Åü„?Ø Â£Å„Åå„ÅÇ„Çã?º?
			dead_end.direction.down = 1;		//‰∏ã„Éï„É©„Ç∞„ÇíÂª∫„Å¶„Ç?
			dead_end.direction.count++;		//1Ë∂≥„Å?
		}
	}

//‰∏ä„?û„Çπ
	if ((map::get_wall(target_x, target_y, MUKI_UP))) {		//‰∏äÂ£Å„Åå„ÅÇ„Çã„Å™„Ç?
		dead_end.direction.up = 1;		//‰∏ä„Éï„É©„Ç∞„ÇíÂª∫„Å¶„Ç?
		dead_end.direction.count++;		//1Ë∂≥„Å?
	} else if ((target_y + 1 < MAZE_SIZE)) {		//x,y+1„ÅÆÂ∫ßÊ®ô„ÅåËø∑Ë∑ØÂÜ?(MAX_yÊú™Ê∫?)„Åß„ÅÇ„Çã
		if ((maze_step[target_x][target_y + 1] == STEP_INIT)
				|| (map::check_exist(target_x, target_y, MUKI_UP) == false)) {//‰∏ä„?Æ„Éû„Çπ„Å´Ë°å„Åë„Å™„Å?ºàÂ?•„Å£„Å¶„ÇãÊ≠©Êï∞„Å?255„Ä?„Åæ„Åü„?Ø„Ä?Â£Å„Åå„ÅÇ„Çã?º?
			dead_end.direction.up = 1;		//‰∏ä„Éï„É©„Ç∞„ÇíÂª∫„Å¶„Ç?
			dead_end.direction.count++;		//1Ë∂≥„Å?
		}
	}

//Ë¢ãÂ∞èË∑Ø„Çí„?µ„Åï„Åê
	if (dead_end.direction.count >= 3) {		//Ë°å„Åë„Å™„Å?ÊñπÂêë„Åå3‰ª•‰∏? = Ë¢ãÂ∞èË∑Ø„Å™„Ç?
		if ((target_x == 0) && (target_y == 0)) {		//„Åù„Çå„Åå„Çπ„Çø„Éº„Éà„Å™„Çâ‰Ωï„ÇÇ„Åó„Å™„Å?
		} else if ((target_x == GOAL_x) && (target_y == GOAL_y)) {//„Åù„Çå„Åå„Ç¥„Éº„É´„Åß„ÇÇ‰Ωï„ÇÇ„Åó„Å™„Å?
		} else {							//‰∏äË®ò‰ª•Â§ñ„Å™„ÇâË¢ãÂ∞èË∑Ø„ÇíÊΩ∞„Å?
			maze_step[target_x][target_y] = STEP_INIT;					//Ê≠©Êï∞„ÇíÂ?ùÊúüÂå?
			//Ë¢ãÂ∞èË∑Ø„ÅÆ„ÅÇ„ÅÑ„Å¶„ÇãÊñπÂêë„Å´„Å§„Å?„Å¶„ÇÇ„ÅÜ‰∏?ÂõûÂêå„Åò„Åì„Å®„ÇíË°å„ÅÜ
			if (dead_end.direction.left == 0) {
				map::create_wall(target_x, target_y, MUKI_LEFT);
				map::remember_exist(target_x, target_y, MUKI_LEFT);
				close_one_dead_end(target_x - 1, target_y);

			}
			if (dead_end.direction.right == 0) {
				map::create_wall(target_x, target_y, MUKI_RIGHT);
				map::remember_exist(target_x, target_y, MUKI_RIGHT);
				close_one_dead_end(target_x + 1, target_y);
			}
			if (dead_end.direction.down == 0) {
				map::create_wall(target_x, target_y, MUKI_DOWN);
				map::remember_exist(target_x, target_y, MUKI_DOWN);
				close_one_dead_end(target_x, target_y - 1);
			}
			if (dead_end.direction.up == 0) {
				map::create_wall(target_x, target_y, MUKI_UP);
				map::remember_exist(target_x, target_y, MUKI_UP);
				close_one_dead_end(target_x, target_y + 1);
			}
		}
	}
}

void step::close_dead_end() {
	for (int i = 0; i < MAZE_SIZE; i++) {
		for (int j = 0; j < MAZE_SIZE; j++) {
			close_one_dead_end(i, j);
		}
	}
}

step::step() {
	map::reset_maze();
	step_reset();

}

step::step(const MAP_DATA* input_data) {
	map::input_map_data(input_data);
}

step::~step() {

}
PATH path::path_memory[PATH_MAX];

void path::set_step_for_shortest(unsigned char target_x,
		unsigned char target_y) {

//set_step_by_known(target_x, target_y);		//Êó¢Áü•„ÅÆÂ£Å„Å†„Åë„ÅßÊ≠©Êï∞„Éû„ÉÉ„Éó„Çí‰ΩúÊ??
	spread_step(target_x, target_y, true);					//Êó¢Áü•„ÅÆÂ£Å„Å†„Åë„ÅßÊ≠©Êï∞„Éû„ÉÉ„Éó„Çí‰ΩúÊ??
	close_dead_end();					//Ë¢ãÂ∞èË∑Ø„ÇíÊΩ∞„Å?
}

void path::displace_path(unsigned int path_number) {
//1ÂÄã„Åö„Çâ„Åô
	for (uint16_t number = path_number;
			path_memory[number].element.flag == TRUE; number++) {
		path_memory[number].all = path_memory[number + 1].all;
	}
}

void path::improve_path() {
	unsigned int count = 0;

	while (path_memory[count].element.flag == TRUE) {	//path„ÅåÁµÇ„Çè„Çå„?∞ÁµÇ‰∫?

		if (path_memory[count].element.distance >= 1) {	//90mm‰ª•‰∏äÁõ¥ÈÄ≤„Åô„Çã„Å™„Ç?

			if (path_memory[count + 1].element.distance >= 1) {	//„Çø„Éº„É≥Âæå„ÇÇ90mm‰ª•‰∏äÁõ¥ÈÄ≤„Åô„Çã„Å™„Ç?	Â§ßÂõû„Çä„ÅÆ„ÉÅ„Çß„É?„ÇØ„ÇíË°å„ÅÜ
				path_memory[count].element.turn = 2;	//Â§ßÂõû„Çä„Çø„Éº„É≥„Å´Â§âÊõ¥
				path_memory[count].element.distance -= 1;	//Áõ¥Á∑öË∑ùÈõ¢„Ç?90mmÊ∏õ„Çâ„Å?
				path_memory[count + 1].element.distance -= 1;	//Áõ¥Á∑öË∑ùÈõ¢„Ç?90mmÊ∏õ„Çâ„Å?

			} else {								//„Çø„Éº„É≥Âæ?90mmÁõ¥ÈÄ≤„ÅØ„Åó„Å™„Å?„Å™„Ç?

				if (path_memory[count].element.muki
						== path_memory[count + 1].element.muki) {//Âêå„ÅòÊñπÂêë„Å´Êõ≤„Åå„Çã„Å™„Ç?(U„Çø„Éº„É≥)

					if (path_memory[count + 2].element.distance >= 1) {	//U„Çø„Éº„É≥Âæ?90mmÁõ¥ÈÄ≤„Åô„Çã„Å™„Ç?
						path_memory[count].element.turn = 3;	//180¬∞„Çø„Éº„É≥„Å´Â§âÊõ¥
						path_memory[count].element.distance -= 1;//Áõ¥Á∑öË∑ùÈõ¢„Ç?90mmÊ∏õ„Çâ„Å?
						path_memory[count + 2].element.distance -= 1;//Áõ¥Á∑öË∑ùÈõ¢„Ç?90mmÊ∏õ„Çâ„Å?

						//1ÂÄã„Åö„Çâ„Åô
						displace_path(count + 1);

					} else {							//U„Çø„Éº„É≥Âæå„Åô„ÅêÊõ≤„Åå„Çã„Å™„Ç?

						if (path_memory[count + 2].element.flag == FALSE) {	//path„ÅåÁµÇ„Çè„Å£„Å¶„Å™„Å?„Åã„ÉÅ„Çß„É?„ÇØ„Ä?ÁµÇ„Çè„Å£„Å¶„Å™„Åë„Çå„Å∞ÈÄ?ÊñπÂêë„Å´„Çø„Éº„É≥„ÅÆ„ÅØ„Å?
							//„Éä„Éä„É°„ÅÆÂá¶Áê?„Å™„ÅÆ„Åß‰Ωï„ÇÇ„Åó„Å™„Å?
						}

					}

				} else {		//ÈÅï„ÅÜÊñπÊ≥ï„Å´Êõ≤„Åå„Çã„Å™„Ç?
					//„Éä„Éä„É°„ÅÆÂá¶Áê?„Å™„ÅÆ„Åß‰Ωï„ÇÇ„Åó„Å™„Å?
				}

			}

		}

		count++;
	}

}

void path::improve_advance_path() {
	unsigned int count = 0;
	unsigned char temp_distance = 0;	//‰∏?ÊôÇÁöÑ„Å™Ë∑ùÈõ¢‰øùÂ≠?
	unsigned char naname_flag = FALSE;	//ÁèæÂú®Ê©ü‰Ωì„ÅåÊñú„ÇÅ„Åã„ÇíÂà§Êñ≠	ON„Å™„ÇâÊñú„ÇÅËµ∞Ë°å‰∏≠

	while (path_memory[count].element.flag == TRUE) {	//path„ÅåÁµÇ„Çè„Çå„?∞ÁµÇ‰∫?

		if (naname_flag == TRUE) {	//Êñú„ÇÅËµ∞Ë°å‰∏≠„Å™„Ç?	Á¢∫ÂÆü„Å´Áõ¥ÈÄ≤Ë∑ùÈõ¢(distance)„Å?0„ÅÆ„ÅØ„Å?

			if (path_memory[count + 1].element.distance >= 1) {	//Ê¨°„ÅÆ„Çø„Éº„É≥Âæ?90mm‰ª•‰∏äÁõ¥ÈÄ≤(Êñú„ÇÅÁµÇ„Çè„Ç?)

				path_memory[count].element.turn = 5;	//ÁµÇ„Çè„Ç?45¬∞„Çø„Éº„É≥„Å´Â§âÊõ¥
				path_memory[count + 1].element.distance -= 1;	//Áõ¥Á∑öË∑ùÈõ¢„Ç?90mmÊ∏õ„Çâ„Å?
				naname_flag = FALSE;
				count++;	//ÈÖçÂ?ó„ÇíÊ¨°„Å∏

			} else if (path_memory[count + 2].element.distance >= 1) {//Ê¨°„ÅÆÊ¨°„ÅÆ„Çø„Éº„É≥Âæ?90mm‰ª•‰∏äÁõ¥ÈÄ≤(Êñú„ÇÅÁµÇ„Çè„Ç?)

				if (path_memory[count].element.muki
						== path_memory[count + 1].element.muki) {	//Âêå„ÅòÊñπÂêë„?Æ2Âõû„Çø„Éº„É≥

					path_memory[count].element.turn = 7;	//ÁµÇ„Çè„Ç?135¬∞„Çø„Éº„É≥„Å´Â§âÊõ¥
					displace_path(count + 1);	//‰∏?ÂÄã„Åö„Çâ„Åô
					path_memory[count + 1].element.distance -= 1;//„Çø„Éº„É≥Âæå„?ÆÁõ¥Á∑öË∑ùÈõ¢„Ç?90mmÊ∏õ„Çâ„Å?
					naname_flag = FALSE;
					count++;	//ÈÖçÂ?ó„ÇíÊ¨°„Å∏

				} else {								//‰∫§‰∫í„?Æ„Çø„Éº„É≥(„ÇÆ„Ç∂„ÇÆ„Ç∂)

					path_memory[count].element.distance += 1;	//Êñú„ÇÅ„ÅÆÁõ¥Á∑öË∑ùÈõ¢„Ç?1Â¢ó„ÇÑ„Å?
					temp_distance = path_memory[count].element.distance;//Ë∑ùÈõ¢„Çí‰∏?ÊôÇÁöÑ„Å´ÊåÅ„Å£„Å¶„Åä„Åè
					displace_path(count);								//‰∏?ÂÄã„Åö„Çâ„Åô
					path_memory[count].element.distance = temp_distance;//Ë∑ùÈõ¢„ÇíÂ?•„Çå„Å™„Åä„Åô

				}

			} else {									//„Åæ„Å?„Åæ„Å?Êñú„ÇÅ„ÅØÁ∂ö„Åè„Å™„Ç?

				if (path_memory[count].element.muki
						== path_memory[count + 1].element.muki) {//Âêå„ÅòÊñπÂêë„?Æ2Âõû„Çø„Éº„É≥	„Ç≥„ÅÆÂ≠?

					path_memory[count].element.turn = 8;		//Êñú„ÇÅ90¬∞„Çø„Éº„É≥„Å´Â§âÊõ¥
					displace_path(count + 1);							//‰∏?ÂÄã„Åö„Çâ„Åô
					count++;									//ÈÖçÂ?ó„ÇíÊ¨°„Å∏

				} else {							//ÈÅï„ÅÜÊñπÂêë„?Æ2Âõû„Çø„Éº„É≥	„ÇÆ„Ç∂„ÇÆ„Ç∂

					path_memory[count].element.distance += 1;	//Êñú„ÇÅ„ÅÆÁõ¥Á∑öË∑ùÈõ¢„Ç?1Â¢ó„ÇÑ„Å?
					temp_distance = path_memory[count].element.distance;//Ë∑ùÈõ¢„Çí‰∏?ÊôÇÁöÑ„Å´ÊåÅ„Å£„Å¶„Åä„Åè
					displace_path(count);							//‰∏?ÂÄã„Åö„Çâ„Åô
					path_memory[count].element.distance = temp_distance;//Ë∑ùÈõ¢„ÇíÂ?•„Çå„Å™„Åä„Åô

				}
			}

		} else {										//Êñú„ÇÅ„Åò„ÇÉ„Å™„Åë„Çå„Å∞

			if (path_memory[count + 1].element.distance >= 1) {	//„Çø„Éº„É≥Âæå„ÇÇ90mm‰ª•‰∏äÁõ¥ÈÄ≤„Åô„Çã„Å™„Ç?	Â§ßÂõû„Çä„ÅÆ„ÉÅ„Çß„É?„ÇØ„ÇíË°å„ÅÜ

				if ((count != 0) || (path_memory[0].element.distance > 1)) {//Âàù„Å£Á´Ø„ÅÆ„Çø„Éº„É≥„Åò„ÇÉ„Å™„Åë„Çå„Å∞

					path_memory[count].element.turn = 2;	//Â§ßÂõû„Çä„Çø„Éº„É≥„Å´Â§âÊõ¥
					path_memory[count].element.distance -= 1;	//Áõ¥Á∑öË∑ùÈõ¢„Ç?90mmÊ∏õ„Çâ„Å?
					path_memory[count + 1].element.distance -= 1;//Áõ¥Á∑öË∑ùÈõ¢„Ç?90mmÊ∏õ„Çâ„Å?

				} else {
					//TODO Âàù„Å£Á´ØÂ§ßÂõû„Çä90„Çø„Éº„É≥„ÅÆÂá¶Áê?
				}

			} else {								//„Çø„Éº„É≥Âæ?90mmÁõ¥ÈÄ≤„ÅØ„Åó„Å™„Å?„Å™„Ç?

				if (path_memory[count].element.muki
						== path_memory[count + 1].element.muki) {//Âêå„ÅòÊñπÂêë„Å´Êõ≤„Åå„Çã„Å™„Ç?(U„Çø„Éº„É≥)

					if (path_memory[count + 2].element.distance >= 1) {	//U„Çø„Éº„É≥Âæ?90mmÁõ¥ÈÄ≤„Åô„Çã„Å™„Ç?

						path_memory[count].element.turn = 3;	//180¬∞„Çø„Éº„É≥„Å´Â§âÊõ¥
						path_memory[count].element.distance -= 1;//Áõ¥Á∑öË∑ùÈõ¢„Ç?90mmÊ∏õ„Çâ„Å?
						path_memory[count + 2].element.distance -= 1;//Áõ¥Á∑öË∑ùÈõ¢„Ç?90mmÊ∏õ„Çâ„Å?
						displace_path(count + 1);	//‰∏?ÂÄã„Åö„Çâ„Åô

					} else {							//U„Çø„Éº„É≥Âæå„Åô„ÅêÊõ≤„Åå„Çã„Å™„Ç?

						if (path_memory[count + 2].all != 0) {//path„ÅåÁµÇ„Çè„Å£„Å¶„Å™„Å?„Åã„ÉÅ„Çß„É?„ÇØ„Ä?ÁµÇ„Çè„Å£„Å¶„Å™„Åë„Çå„Å∞ÈÄ?ÊñπÂêë„Å´„Çø„Éº„É≥„ÅÆ„ÅØ„Å?

							path_memory[count].element.turn = 6;	//135¬∞„Çø„Éº„É≥„Å´Â§âÊõ¥
							path_memory[count].element.distance -= 1;//Áõ¥Á∑öË∑ùÈõ¢„Ç?90mmÊ∏õ„Çâ„Å?
							displace_path(count + 1);					//‰∏?ÂÄã„Åö„Çâ„Åô
							naname_flag = TRUE;

						}

					}

				} else {		//ÈÅï„ÅÜÊñπÊ≥ï„Å´Êõ≤„Åå„Çã„Å™„Ç?

					path_memory[count].element.turn = 4;		//45¬∞„Çø„Éº„É≥„Å´Â§âÊõ¥
					path_memory[count].element.distance -= 1;	//Áõ¥Á∑öË∑ùÈõ¢„Ç?90mmÊ∏õ„Çâ„Å?
					naname_flag = TRUE;

				}

			}
			count++;		//ÈÖçÂ?ó„ÇíÊ¨°„Å∏
		}
	}

}

void path::create_path() {
	int8_t path_x, path_y;							//‰ΩçÁΩÆÁÆ°Áê?Áî®
	int8_t path_direction_x, path_direction_y;							//ÊñπÂêëÁÆ°Áê?Áî®
	bool straight_flag;							//Áõ¥Á∑ö„Åß„Åç„Çã„Åã„Å©„Å?„ÅãÂà§Âà•Áî®„Éï„É©„Ç∞
	SAVE_DIRECTION save_direction;							//Ê¨°„Å´Ë°å„Åè„Éû„Çπ„ÅÆÊñπÂêë„Çí‰øùÂ≠?
	uint16_t count = 0;							//Êï∞„ÇíÊï∞„Åà„Çã„Å?„Åë„?ÆÂ§âÊï∞

//set_step_for_shortest(GOAL_x,GOAL_y);

	spread_step(GOAL_x, GOAL_y, true);

	path_reset();

	path_direction_x = 0;							//ÊñπÂêë„ÇíÂàùÊúüÂå?
	path_direction_y = 1;

	path_x = 0;							//‰ΩçÁΩÆ„ÇíÂ?ùÊúüÂå?
	path_y = 0;

	straight_flag = false;							//„Éï„É©„Ç∞„ÅØÊäò„Å£„Å¶„Åä„Åè

	path_memory[count].element.distance += 1;					//Êú?Âàù„?ØÂø?„ÅöÂçäÂå∫ÁîªÁõ¥ÈÄ≤„Åô„Çã
	path_memory[count].element.flag = TRUE;						//Êú?Âàù„Å†„ÅóÁ∂öË°å„Éï„É©„Ç∞„ÇíÂª∫„Å¶„Ç?

	while (1) {

		save_direction.all = 0;		//Ê¨°„Å´Ë°å„ÅèÊñπÂêëÂ?ùÊúüÂå?
		straight_flag = false;		//„Éï„É©„Ç∞„ÅØÊäò„Å£„Å¶„Åä„Åè

		path_x += path_direction_x;		//‰ΩçÁΩÆ‰øÆÊ≠£
		path_y += path_direction_y;

		//GOAL„Å´„Åü„Å©„ÇäÁùÄ„Å?„Åü„ÇâÁµÇ‰∫?
		if ((path_x == GOAL_x) && (path_y == GOAL_y)) {
			path_memory[count].element.distance += 1;	//90mmÁõ¥ÈÄ≤„ÇíËøΩÂä?	„Ç¥„Éº„É´„Å´ÂÖ•„Çä„Åç„Çã„Åü„Ç?
			path_memory[count + 1].element.flag = FALSE;		//Á∂öË°å„Éï„É©„Ç∞„ÇíÊäò„Å£„Å¶„Åä„Åè
			break;
		}

		//Â∑¶
		if ((path_x - 1) >= 0) {	//path_x-1,path_y„ÅÆÂ∫ßÊ®ô„ÅåËø∑Ë∑ØÂÜ?(0‰ª•‰∏?)„Åß„ÅÇ„Çã
			if (get_step(path_x - 1, path_y) < get_step(path_x, path_y)) {//Ê≠©Êï∞„ÅÆÂ∞è„Åï„Å?„Åª„Å?„Å∏
				if ((map::get_wall(path_x, path_y, MUKI_LEFT) == false)) {//Â£Å„Åå„Å™„Å?„Å™„Ç?
					save_direction.element.left = 1;	//Ê¨°„Å´ÈÄ≤„Ç?ÊñπÂêë„?ÆÈÅ∏ÊäûËÇ¢„Å´ËøΩÂä?
					if ((path_direction_x == -1) && (path_direction_y == 0)) {//Â∑¶„ÇíÂêë„Å?„Å¶„Çã„Å®„ÅçÔºàÁõ¥ÈÄ≤„Åß„Åç„Çã„Å®„ÅçÔº?
						straight_flag = true;	//Áõ¥ÈÄ≤„Éï„É©„Ç∞„Çí„Åü„Å¶„Ç?
					}
				}
			}

		}

		//Âè≥
		if ((path_x + 1) < MAZE_SIZE) {	//path_x+1,path_y„ÅÆÂ∫ßÊ®ô„ÅåËø∑Ë∑ØÂÜ?„Åß„ÅÇ„Çã
			if (get_step(path_x + 1, path_y) < get_step(path_x, path_y)) {//Ê≠©Êï∞„ÅÆÂ∞è„Åï„Å?„Åª„Å?„Å∏
				if ((map::get_wall(path_x, path_y, MUKI_RIGHT) == false)) {	//Â£Å„Åå„Å™„Å?„Å™„Ç?
					save_direction.element.right = 1;	//Ê¨°„Å´ÈÄ≤„Ç?ÊñπÂêë„?ÆÈÅ∏ÊäûËÇ¢„Å´ËøΩÂä?
					if ((path_direction_x == 1) && (path_direction_y == 0)) {//Âè≥„ÇíÂêë„Å?„Å¶„Çã„Å®„ÅçÔºàÁõ¥ÈÄ≤„Åß„Åç„Çã„Å®„ÅçÔº?
						straight_flag = true;	//Áõ¥ÈÄ≤„Éï„É©„Ç∞„Çí„Åü„Å¶„Ç?
					}
				}
			}
		}

		//‰∏?
		if ((path_y - 1) >= 0) {	//path_x,path_y-1„ÅÆÂ∫ßÊ®ô„ÅåËø∑Ë∑ØÂÜ?(0‰ª•‰∏?)„Åß„ÅÇ„Çã
			if (get_step(path_x, path_y - 1) < get_step(path_x, path_y)) {//Ê≠©Êï∞„ÅÆÂ∞è„Åï„Å?„Åª„Å?„Å∏
				if ((map::get_wall(path_x, path_y, MUKI_DOWN) == false)) {//Â£Å„Åå„Å™„Å?„Å™„Ç?
					save_direction.element.down = 1;	//Ê¨°„Å´ÈÄ≤„Ç?ÊñπÂêë„?ÆÈÅ∏ÊäûËÇ¢„Å´ËøΩÂä?
					if ((path_direction_x == 0) && (path_direction_y == -1)) {//‰∏ã„ÇíÂêë„ÅÑ„Å¶„Çã„Å®„ÅçÔºàÁõ¥ÈÄ≤„Åß„Åç„Çã„Å®„ÅçÔº?
						straight_flag = true;	//Áõ¥ÈÄ≤„Éï„É©„Ç∞„Çí„Åü„Å¶„Ç?
					}
				}
			}
		}

		//‰∏?
		if ((path_y + 1) < MAZE_SIZE) {	//path_x,path_y+1„ÅÆÂ∫ßÊ®ô„ÅåËø∑Ë∑ØÂÜ?(16‰ª•‰∏?)„Åß„ÅÇ„Çã
			if (get_step(path_x, path_y + 1) < get_step(path_x, path_y)) {//Ê≠©Êï∞„ÅÆÂ∞è„Åï„Å?„Åª„Å?„Å∏
				if ((map::get_wall(path_x, path_y, MUKI_UP) == false)) {//Â£Å„Åå„Å™„Å?„Å™„Ç?
					save_direction.element.up = 1;	//Ê¨°„Å´ÈÄ≤„Ç?ÊñπÂêë„?ÆÈÅ∏ÊäûËÇ¢„Å´ËøΩÂä?
					if ((path_direction_x == 0) && (path_direction_y == 1)) {//‰∏ä„ÇíÂêë„ÅÑ„Å¶„Çã„Å®„ÅçÔºàÁõ¥ÈÄ≤„Åß„Åç„Çã„Å®„ÅçÔº?
						straight_flag = true;	//Áõ¥ÈÄ≤„Éï„É©„Ç∞„Çí„Åü„Å¶„Ç?
					}
				}
			}
		}

		if (straight_flag) {			//Áõ¥ÈÄ≤„Åß„Åç„Çã„Å™„Ç?
			path_memory[count].element.distance += 2;			//ÂçäÂå∫ÈñìÁõ¥ÈÄ≤*2 „ÇíËøΩÂä?

		} else {								//„Çø„Éº„É≥„Åô„Çã„Å™„Ç?
			path_memory[count].element.turn = 1;						//Â∞èÂõû„Çä„Çø„Éº„É≥

			if (path_direction_x == 0) {				//‰∏ä„Åã‰∏ãÂêë„Åç„?Æ„Å®„Å?
				//Âè≥„Å´Ë°å„Åç„Åü„ÅÑ
				if (save_direction.element.right == 1) {
					if (path_direction_y == 1) {	//‰∏ä„ÇíÂêë„ÅÑ„Å¶„Ç?
						//Âè≥Âêë„Åç„Çø„Éº„É≥
						path_memory[count].element.muki = MUKI_RIGHT;
					} else {					//‰∏ã„ÇíÂêë„ÅÑ„Å¶„Ç?
						//Â∑¶Âêë„Åç„Çø„Éº„É≥
						path_memory[count].element.muki = MUKI_LEFT;
					}
					//Â∑¶„Å´Ë°å„Åç„Åü„ÅÑ
				} else {
					if (path_direction_y == -1) {	//‰∏ã„ÇíÂêë„ÅÑ„Å¶„Ç?
						//Âè≥Âêë„Åç„Çø„Éº„É≥
						path_memory[count].element.muki = MUKI_RIGHT;
					} else {					//‰∏ä„ÇíÂêë„ÅÑ„Å¶„Ç?
						//Â∑¶Âêë„Åç„Çø„Éº„É≥
						path_memory[count].element.muki = MUKI_LEFT;
					}
				}

			} else {										//Âè≥„ÅãÂ∑¶Âêë„Åç„ÅÆ„Å®„Å?
				//‰∏ä„Å´Ë°å„Åç„Åü„ÅÑ
				if (save_direction.element.up == 1) {
					if (path_direction_x == -1) {	//Â∑¶„ÇíÂêë„Å?„Å¶„Ç?
						//Âè≥Âêë„Åç„Çø„Éº„É≥
						path_memory[count].element.muki = MUKI_RIGHT;
					} else {					//Âè≥„ÇíÂêë„Å?„Å¶„Ç?
						//Â∑¶Âêë„Åç„Çø„Éº„É≥
						path_memory[count].element.muki = MUKI_LEFT;
					}
					//‰∏ã„Å´Ë°å„Åç„Åü„ÅÑ
				} else {
					if (path_direction_x == 1) {	//Âè≥„ÇíÂêë„Å?„Å¶„Ç?
						//Âè≥Âêë„Åç„Çø„Éº„É≥
						path_memory[count].element.muki = MUKI_RIGHT;
					} else {					//Â∑¶„ÇíÂêë„Å?„Å¶„Ç?
						//Â∑¶Âêë„Åç„Çø„Éº„É≥
						path_memory[count].element.muki = MUKI_LEFT;
					}
				}
			}
			//„Çø„Éº„É≥„Å´„Çà„ÇãÊñπÂêë‰øÆÊ≠£
			direction_turn(&path_direction_x, &path_direction_y,
					path_memory[count].element.muki);

			count++;
			path_memory[count].element.flag = TRUE;			//„Éë„Çπ„ÅåÁ∂ö„Åè„ÅÆ„Å™„ÇâÁ∂öË°å„Éï„É©„Ç∞„ÇíÂª∫„Å¶„Ç?

		}

	}

}

void path::create_path_advance() {
	create_path();
	improve_path();
}

void path::create_path_naname() {
	create_path();
	improve_advance_path();
}

void path::draw_path() {
	myprintf("path-start \n\r");

	for (int i = 0; path_memory[i].element.flag == TRUE; i++) {
		//Áõ¥Á∑?
		myprintf("distance -> %2d *", path_memory[i].element.distance);
		if (MOUSE_MODE == 1)								//„Éè„?º„Éï„?ØÂçäÂå∫Èñì„Åå45mm
			myprintf("45mm\n\r");
		else
			myprintf("90mm\n\r");

		//„Çø„Éº„É≥
		//myprintf("turn -> %2d ", path_memory[i].element.turn);	//Ê†ºÁ¥ç„Åó„Å¶„Å?„ÇãÂ?§„ÇíË°®Á§∫
		myprintf("turn -> ");
		switch (path::get_path_turn_type(i)) {
		case none:
			myprintf("none");
			break;
		case small:
			myprintf("small");
			break;
		case big_90:
			myprintf("big_90");
			break;
		case big_180:
			myprintf("big_180");
			break;
		case begin_45:
			myprintf("begin_45");
			break;
		case end_45:
			myprintf("end_45");
			break;
		case begin_135:
			myprintf("begin_135");
			break;
		case end_135:
			myprintf("end_135");
			break;
		case oblique_90:
			myprintf("oblique_90");
			break;
		case spin_turn:
			myprintf("spin_turn");
			break;
		default:
			myprintf("error!! %d", path_memory[i].element.turn);
			break;
		}

		if (path_memory[i].element.muki == MUKI_RIGHT) {
			myprintf(" Right\n\r");
		} else if (path_memory[i].element.muki == MUKI_LEFT) {
			myprintf(" Left\n\r");
		}
	}
	myprintf("path-end \n\r");

}

void path::path_reset() {
	unsigned int reset_count;
	for (reset_count = 0; reset_count < PATH_MAX; reset_count++) {
		path_memory[reset_count].all = 0;
	}
}

bool path::get_path_flag(signed int index_number) {
//path„Åå„ÅÇ„Çã„Å™„Çâtrue,„Å™„Å?„Å™„Çâfalse„ÇíËøî„Åô
	if (path_memory[index_number].element.flag == TRUE) {
		return true;
	} else {
		return false;
	}

}

float path::get_path_straight(unsigned int index_number) {
	return (0.045 * MOUSE_MODE
			* (float) path_memory[index_number].element.distance);
}

SLALOM_TYPE path::get_path_turn_type(unsigned int index_number) {
	switch (path_memory[index_number].element.turn) {
	case 0:
		return none;
		break;

	case 1:
		return small;
		break;

	case 2:
		return big_90;
		break;

	case 3:
		return big_180;
		break;

	case 4:
		return begin_45;
		break;

	case 5:
		return end_45;
		break;

	case 6:
		return begin_135;
		break;

	case 7:
		return end_135;
		break;

	case 8:
		return oblique_90;
		break;
	}

	return spin_turn;
}

unsigned char path::get_path_turn_muki(unsigned int index_number) {
	return path_memory[index_number].element.muki;
}

bool path::set_path(uint16_t _index, PATH _path) {
	if (_index >= PATH_MAX)
		return false;

	path_memory[_index] = _path;
	return true;
}

void direction_turn(signed char *direction_x, signed char *direction_y,
		unsigned char direction_turn_muki) {
	signed char temp_direction_x = (*direction_x);	//‰ªñ„?ÆÂ†¥Êâ?„Å´‰øùÂ≠ò„Åó„Å™„Å?„Å®Â§âÊèõÈÄî‰∏≠„ÅßÂèÇÁ?ß„Åô„ÇãÁæΩÁõÆ„Å´„Å™„Ç?
	signed char temp_direction_y = (*direction_y);
	if (direction_turn_muki == MUKI_LEFT) {
		*direction_x = (temp_direction_x) * 0 + (temp_direction_y) * (-1);//ÂõûËª¢Ë°åÂ?ó„?ÆŒ∏=90„ÅÆË®àÁÆ?
		*direction_y = (temp_direction_x) * 1 + (temp_direction_y) * 0;	//ÂõûËª¢Ë°åÂ?ó„?ÆŒ∏=90„ÅÆË®àÁÆ?
	} else {
		*direction_x = (temp_direction_x) * 0 + (temp_direction_y) * 1;	//ÂõûËª¢Ë°åÂ?ó„?ÆŒ∏=-90„ÅÆË®àÁÆ?
		*direction_y = (temp_direction_x) * (-1) + (temp_direction_y) * 0;//ÂõûËª¢Ë°åÂ?ó„?ÆŒ∏=-90„ÅÆË®àÁÆ?
	}

}

std::pair<int8_t, int8_t> compas_to_direction(compas tar) {
	//TODO Êñú„ÇÅ
	std::pair<int8_t, int8_t> ans(0, 0);
	switch (tar) {
	case north:
		ans.second = 1;
		break;
	case south:
		ans.second = -1;
		break;
	case east:
		ans.first = 1;
		break;
	case west:
		ans.first = -1;
		break;
	default:
		mouse::error();
		myprintf(" Error! Not expected turn type at std::pair<int8_t, int8_t>compas_to_direction() \n\r");
		myprintf(" tar direction is [%d] \n\r", tar);
		ans.first = 0;
		ans.second = 0;
		break;
	}
	return ans;
}

compas direction_to_compas(std::pair<int8_t, int8_t> tar) {
	//TODO Êñú„ÇÅ
	compas ans = north;
	switch (tar.first) {
	case 0:
		switch (tar.second) {
		case 0:
			ans = center;
			break;
		case 1:
			ans = north;
			break;
		case -1:
			ans = south;
			break;
		}
		break;
	case 1:
		ans = east;
		break;
	case -1:
		ans = west;
		break;
	}
	return ans;
}

uint16_t node_step::step[x_size][y_size];

bool node_step::able_set_step(uint8_t double_x, uint8_t y, compas muki,
		uint16_t step_val, bool by_known) {
	uint8_t def_muki = compas_to_muki(muki);

//Ë¶ã„Å¶„Å?„Å™„Å?ÈÉ®Âà?„Å´„ÅØÊõ∏„ÅçËæº„ÇÅ„Å™„Å?
	if (by_known) {
		if (!map::check_exist(double_x / 2, y, def_muki))
			return false;
	}

//ÈÖçÂ?ó„?ÆË¶ÅÁ¥?Â§ñ„Å™„Çâ‰Ωï„ÇÇ„Åó„Å™„Å?
	if (is_outside_array(double_x, y))
		return false;

//Â£Å„Åå„ÅÇ„ÇãÈÉ®Âà?„Å´„ÅØÊõ∏„ÅçËæº„ÇÅ„Å™„Å?
	if (map::get_wall(double_x / 2, y, def_muki))
		return false;

//Êõ∏„ÅçËæº„Ç?Ê≠©Êï∞„Çà„ÇäÂ∞è„Åï„Å?Â†¥Êâ?„Å´„ÅØÊõ∏„ÅçËæº„ÇÅ„Å™„Å?
	if (step[double_x][y] <= step_val)
		return false;

	return true;
}

bool node_step::is_outside_array(uint8_t x_index, uint8_t y_index) {
	if (x_index >= x_size)
		return true;
	if (x_index < 0)
		return true;
	if (y_index >= y_size)
		return true;
	if (y_index < 0)
		return true;

	return false;
}

bool node_step::set_step(uint8_t x, uint8_t y, compas muki, uint16_t step_val,
		bool by_known) {
//‰ª£ÂÖ•Áî®„ÅÆÂ§âÊï∞
	uint8_t step_x = x;
	uint8_t step_y = y;

	switch (muki) {
	//ÂçóÂêë„Åç„Å®Ë•øÂêë„Åç„Å´Â§âÊõ¥„Åó„Å¶„Ç?„Çä„Å™„Åä„Åó
	case north:
		step_y++;	//y„Ç?1„Å§Â¢ó„ÇÑ„Åó„Å¶ÂçóÂêë„ÅçÊâ±„Å?„Å´
		step_x = 2 * x + 1;	//ÂçóÂêë„Åç„Å†„Å®Ê®™Âêë„Åç„ÅÆÂ£Å„Å™„ÅÆ„Åß„ÄÅxÊñπÂêë„Åå2x+1
		break;
	case south:
		step_x = 2 * x + 1;	//ÂçóÂêë„Åç„Å†„Å®Ê®™Âêë„Åç„ÅÆÂ£Å„Å™„ÅÆ„Åß„ÄÅxÊñπÂêë„Åå2x+1
		break;
	case east:
		step_x = 2 * (x + 1);	//x„Ç?1„Å§Â¢ó„ÇÑ„Åó„Å¶„ÄÅË•øÂêë„ÅçÊâ±„Å?„Ä?Á∏¶Âêë„Åç„ÅÆÂ£Å„Å™„ÅÆ„Åß„ÄÅxÊñπÂêë„?Ø2x
		break;
	case west:
		step_x = 2 * x;	//Ë•øÂêë„Åç„Å?„Å®Á∏¶Âêë„Åç„ÅÆÂ£Å„Å™„ÅÆ„Åß„ÄÅxÊñπÂêë„?Ø2x
		break;

	default:		//Êñú„ÇÅ„ÅØÈùûÂØæÂø?
		return false;
	}

//Êõ∏„ÅçËæº„ÇÅ„Çã„Å™„Ç?
	if (able_set_step(step_x, step_y, muki, step_val, by_known)) {
		step[step_x][step_y] = step_val;	//ÈÖçÂ?ó„Å´Ê≠©Êï∞‰ª£ÂÖ•
		return true;
	}

	return false;
}

bool node_step::set_step_double(uint8_t _double_x, uint8_t _double_y,
		uint16_t step_val, bool by_known) {
	//‰ª£ÂÖ•Áî®„ÅÆÂ§âÊï∞
	uint8_t step_x = _double_x;
	uint8_t step_y = static_cast<uint8_t>(_double_y / 2);

	compas muki = south;
	if (step_x % 2 == 0)
		muki = west;

	//Êõ∏„ÅçËæº„ÇÅ„Çã„Å™„Ç?
	if (able_set_step(step_x, step_y, muki, step_val, by_known)) {
		step[step_x][step_y] = step_val;	//ÈÖçÂ?ó„Å´Ê≠©Êï∞‰ª£ÂÖ•
		return true;
	}
	return false;

}

uint16_t node_step::get_step(uint8_t x, uint8_t y, compas muki) {
//‰ª£ÂÖ•Áî®„ÅÆÂ§âÊï∞
	uint8_t step_x = x;
	uint8_t step_y = y;

	switch (muki) {
//ÂçóÂêë„Åç„Å®Ë•øÂêë„Åç„Å´Â§âÊõ¥„Åó„Å¶„Ç?„Çä„Å™„Åä„Åó„Å¶ÁµÇ‰∫?
	case north:
		step_y++;	//1„Å§Â¢ó„ÇÑ„Åó„Å¶ÂçóÂêë„ÅçÊâ±„Å?„Å´„Ä?
		step_x = 2 * x + 1;	//ÂçóÂêë„Åç„Å†„Å®Ê®™Âêë„Åç„ÅÆÂ£Å„Å™„ÅÆ„Åß„ÄÅxÊñπÂêë„Åå2x+1
		break;
	case south:
		step_x = 2 * x + 1;	//ÂçóÂêë„Åç„Å†„Å®Ê®™Âêë„Åç„ÅÆÂ£Å„Å™„ÅÆ„Åß„ÄÅxÊñπÂêë„Åå2x+1
		break;
	case east:
		step_x = 2 * (x + 1);	//1„Å§Â¢ó„ÇÑ„Åó„Å¶Ë•øÂêë„ÅçÊâ±„Å?„Å´„ÄÇÁ∏¶Âêë„Åç„ÅÆÂ£Å„Å™„ÅÆ„Åß„ÄÅxÊñπÂêë„?Ø2x
		break;
	case west:
		step_x = 2 * x;	//Ë•øÂêë„Åç„Å?„Å®Á∏¶Âêë„Åç„ÅÆÂ£Å„Å™„ÅÆ„Åß„ÄÅxÊñπÂêë„?Ø2x
		break;
	default:	//Êñú„ÇÅ„ÅØÈùûÂØæÂø?
		return init_step;
		break;
	}

//ÈÖçÂ?ó„?ÆË¶ÅÁ¥?Â§ñ„ÇíË™≠„Åø„Å?„Åô„Å®„Åç„?ØInit_step„Ç?
	if (is_outside_array(step_x, step_y))
		return init_step;

	return step[step_x][step_y];	//ÈÖçÂ?ó„Åã„ÇâÊ≠©Êï∞ÂèÇÁ?ß
}

uint16_t node_step::get_step_double(uint8_t double_x, uint8_t double_y) {
	//‰ª£ÂÖ•Áî®„ÅÆÂ§âÊï∞
	uint8_t step_x = double_x;
	uint8_t step_y = double_y / 2;

	//ÈÖçÂ?ó„?ÆË¶ÅÁ¥?Â§ñ„ÇíË™≠„Åø„Å?„Åô„Å®„Åç„?ØInit_step„Ç?
	if (is_outside_array(step_x, step_y))
		return init_step;

	return step[step_x][step_y];	//ÈÖçÂ?ó„Åã„ÇâÊ≠©Êï∞ÂèÇÁ?ß

}

compas node_step::get_min_compas(uint8_t x, uint8_t y) {
	compas ans;

	if (get_step(x, y, north) < get_step(x, y, south))
		ans = north;
	else
		ans = south;
	if (get_step(x, y, east) < get_step(x, y, ans))
		ans = east;
	if (get_step(x, y, west) < get_step(x, y, ans))
		ans = west;

	return ans;
}

void node_step::reset_step(uint16_t reset_val) {
	for (int x = 0; x < x_size; x++) {
		for (int y = 0; y < y_size; y++) {
			step[x][y] = reset_val;
		}
	}

}

void node_step::draw_step() {
	signed char tekitou_x = 0, tekitou_y = MAZE_SIZE - 1;

	myprintf("\n-----start draw_step-------\n\r");

	for (tekitou_y = MAZE_SIZE - 1; tekitou_y >= 0; tekitou_y--) {
		//////////////////////////////////////////Ëø∑Ë∑Ø„ÅÆÂ£Å„?ÆË°?
		for (tekitou_x = 0; tekitou_x < MAZE_SIZE; tekitou_x++) {
			myprintf("+");	//Êü±
			if (get_wall(tekitou_x, tekitou_y, MUKI_UP)) {	//Â£Å„Åå„ÅÇ„Çã„Å™„Ç?
				myprintf("---");
			} else {
				if (get_step(tekitou_x, tekitou_y, north) == init_step)
					myprintf("   ");	//ÂàùÊúüÂÄ§„Å™„ÇâÁ©∫ÁôΩ„Å´
				else
					myprintf("%3d", get_step(tekitou_x, tekitou_y, north));	//„Å™„Åë„Çå„Å∞Ê≠©Êï∞„ÇíÊõ∏„Å?
			}
		}
		myprintf("+\n\r");

		/////////////////////////////////////////Ëø∑Ë∑Ø„ÅÆ„Éû„ÇπÁõÆ„ÅÆË°?
		myprintf("| ");	//Â∑¶Á´Ø„ÅÆÂ£?
		for (tekitou_x = 0; tekitou_x < MAZE_SIZE; tekitou_x++) {
			myprintf(" ");		//Âå∫Áîª‰∏≠Âø?„ÅÆ„Çπ„Éö„?º„Çπ
			if (get_wall(tekitou_x, tekitou_y, MUKI_RIGHT)) {//‰ªäÊõ∏„Å?„Åü„?û„Çπ„ÅÆÂè≥„ÅÆÂ£Å„Åå„ÅÇ„Çå„Å∞Â£Å„ÇíÊõ∏„Å?
				myprintf(" | ");
			} else {
				if (get_step(tekitou_x, tekitou_y, east) == init_step)
					myprintf("   ");	//ÂàùÊúüÂÄ§„Å™„ÇâÁ©∫ÁôΩ„Å´
				else
					myprintf("%3d", get_step(tekitou_x, tekitou_y, east));//„Å™„Åë„Çå„Å∞Ê≠©Êï∞„ÇíÊõ∏„Å?
			}
		}
		myprintf("\n\r");
	}

//‰∏ãËæ∫	Ëø∑Ë∑Ø„ÅÆÁ´Ø„ÅØÂ£Å„Åó„Åã„Å™„Å?„ÅØ„Å?
	for (tekitou_x = 0; tekitou_x < MAZE_SIZE; tekitou_x++)
		myprintf("+---");
	myprintf("+\n\r");

}

node_step::node_step() {
	reset_step(init_step);
}

node_step::node_step(uint16_t reset_val) {
	reset_step(reset_val);
}

node_step::~node_step() {

}

void node_search::set_weight_algo(weight_algo weight) {
	static const std::vector<uint8_t> temp_s { 21, 20, 19, 18, 17, 16, 9, 4 }; //Áõ¥ÈÄ≤ÊñπÂêë„?ÆÈáç„Åø„Å•„Å?
	static const std::vector<uint8_t> temp_o { 15, 14, 13, 12, 11, 10, 9, 4 }; //Êñú„ÇÅÊñπÂêë„?ÆÈáç„Åø„Å•„Å?
	static const std::vector<uint8_t> temp_c { 0, 10, 14 }; //„Ç´„Éº„Éñ„Å´Èñ¢„Åô„ÇãÈáç„Åø„Å•„Åë„??0¬∞,45¬∞,90¬∞„ÅÆÈ†?Áï™

	algo = weight;

	switch (get_weight_algo()) {
	case weight_algo::adachi:
		//Êñú„ÇÅ„ÇÇÁõ¥ÈÄ≤„ÇÇÈáç„Åø„ÅØ1
		std::vector<uint8_t>().swap(straight_w);
		straight_w.emplace_back(1);
		std::vector<uint8_t>().swap(oblique_w);
		oblique_w.emplace_back(1);
		curve_w = std::vector<uint8_t> { 0, 0, 0 };
		break;

	case weight_algo::based_distance:
		//Êñú„ÇÅ„Å®Áõ¥ÈÄ≤„ÅØ1:‚à?2„ÅÆÈáç„Åø
		std::vector<uint8_t>().swap(straight_w);
		straight_w.emplace_back(7);
		std::vector<uint8_t>().swap(oblique_w);
		oblique_w.emplace_back(5);
		curve_w = std::vector<uint8_t> { 0, 0, 0 };
		break;

	case weight_algo::priority_straight:
		straight_w = (temp_s);	//staright_w„Å´‰ª£ÂÖ•
		oblique_w = (temp_o);	//oblique_w„Å´‰ª£ÂÖ•
		curve_w = std::vector<uint8_t> { 0, 0, 0 };
		break;

	case weight_algo::T_Wataru_method:		//Êñú„ÇÅ„Å´„ÇÇÈáç„Åø„Åå„ÅÇ„Ç?
		straight_w = (temp_s);		//staright_w„Å´‰ª£ÂÖ•
		oblique_w = (temp_o);		//oblique_w„Å´‰ª£ÂÖ•
		curve_w = temp_c;
		break;

	}

}

weight_algo node_search::get_weight_algo() {
	return algo;
}

void node_search::spread_step(std::vector<std::pair<uint8_t, uint8_t> > finish,
		bool by_known) {
	bool debranch = false;	//ÊûùÂ??„Åô„Çã„ÅãÂê¶„Å?

//Â∫ßÊ®ôÁÆ°Áê?„ÅØÊ≠©Êï∞„ÅÆÈÖçÂ??(XÊñπÂêë„Å†„ÅëÂ??)„Å®Áï∞„Å™„ÇäX,YÊñπÂêë‰∏°Êñπ„ÅßÂÄç„Å´„Åô„Çã„Ä?Èö£Êé•Â∫ßÊ®ô„?ÆÂèñ„ÇäÊâ±„Å?„ÅåÊ•Ω„Å?„Åã„Çâ
	union _dir {
		int8_t xy;
		struct {
			int8_t x :4;
			int8_t y :4;
		};

		void set(int8_t _x, int8_t _y) {
			x = _x;
			y = _y;
		}
	} dir;			//ÊñπÂêëÁÆ°Áê?Áî®„Ä?int8_t„Åßxy‰∏°ÊñπÁÆ°Áê?„Åó„Åü„Åã„Å£„Å?

	union _dir temp_dir;

	my_queue x_queue;		//Â∫ßÊ®ôÁÆ°Áê?Áî®Queue
	my_queue y_queue;		//Â∫ßÊ®ôÁÆ°Áê?Áî®Queue
	my_queue dir_queue;		//ÊñπÂêëÁÆ°Áê?Áî®Queue
	uint8_t x, y;		//2ÂÄçÂ∫ßÊ®?

	//„Éû„Ç¶„Çπ„ÅÆ„Å?„ÇãÂ∫ßÊ®?
	uint8_t mouse_x = mouse::get_x_position();
	uint8_t mouse_y = mouse::get_y_position();
	uint16_t mouse_step = get_step(mouse_x, mouse_y,
			get_min_compas(mouse_x, mouse_y));

//Ê≠©Êï∞„Çí„É™„Çª„É?„É?
	node_step::reset_step(init_step);

//ÁõÆÊ®ôÂ∫ßÊ®ô„ÇíÊú?Âàù„Å´„Ç≠„É•„Éº„Å´„Å∂„Å°Ëæº„Ç?
	for (uint16_t index = 0; index < finish.size(); index++) {
		for (int i = -1; i < 2; i += 2) {
			x = 2 * finish.at(index).first + 1;
			y = 2 * finish.at(index).second + 1;
			if (set_step_double(x + i, y, 0, by_known)) {
				x_queue.push(x + i);
				y_queue.push(y);
				dir.set(i, 0);
				dir_queue.push(dir.xy);
				//ÊñπÂêë„ÇÇË®òÈå≤
			}
			if (set_step_double(x, y + i, 0, by_known)) {
				x_queue.push(x);
				y_queue.push(y + i);
				dir.set(0, i);
				dir_queue.push(dir.xy);
				//ÊñπÂêë„ÇÇË®òÈå≤
			}
		}
	}

	uint16_t next_step = 0;	//Ê¨°„ÅÆÊ≠©Êï∞
	int8_t dx, dy;	//Ê¨°„Å´Ë°å„ÅèÊñπÂê?
	int8_t curve_index;	//„Çø„Éº„É≥„ÅÆÁ®ÆÈ°û„ÇíÂà§Âà•„Åô„Çã

//Áõ¥ÈÄ≤„Åô„ÇãÊ≠©Êï∞„ÅÆÈáç„Åø„ÇíÁÆ°Áê?
	uint8_t straight;
	loop = 0;
	while (x_queue.size() != 0) {
		loop++;

		//„Ç≠„É•„Éº„Åã„ÇâÂ∫ßÊ®ô„ÇíÂèñ„ÇäÂá∫„Å?
		x = x_queue.pop();	//Âèñ„ÇäÂá∫„Åó„Å¶ÂâäÈô§
		y = y_queue.pop();	//Âèñ„ÇäÂá∫„Åó„Å¶ÂâäÈô§
		next_step = get_step_double(x, y);
		mouse_step = get_step(mouse_x, mouse_y,
				get_min_compas(mouse_x, mouse_y));

		//„Ç≠„É•„Éº„Åã„ÇâÊñπÂêë„ÇíÂèñ„ÇäÂá∫„Å?
		dir.xy = dir_queue.pop();	//Âèñ„ÇäÂá∫„Åó„Å¶ÂâäÈô§

		//ÁèæÂú®„ÅÆ„Éû„Çπ„Çà„ÇäÊ≠©Êï∞„ÅåÂ§ß„Åç„Åè„Å™„Çã„Å™„ÇâÊûùÂà?„Çä„??by_known=true„Å§„Åæ„Çä„Éë„ÇπÁîüÊ?êÊôÇ„Å´„ÅØË°å„Çè„Å™„Å?„Ä?„Éê„Ç∞ÊÄñ„ÅÑ„Åã„Çâ
		if (debranch && (next_step > mouse_step)) {
			//‰Ωï„ÇÇ„Åó„Å™„Å?
		} else {
			temp_dir.xy = dir.xy;
			for (int n = -1; n <= 1; n++) {
				next_step = get_step_double(x, y);
				//Ê¨°„Å´Ë°å„ÅèÊñπÂêë„?Ø3„Éë„Çø„Éº„É≥„Åó„ÅãË¶ã„Å™„Å?„Ä?Âå∫Áîª‰∏≠Âø?„Çà„Çä‰ªä„?ÆÊñπÂêëÂ?¥„Å´„ÅÇ„Çã3Á®Æ„Ä?ex.now(1,1)„Å™„Çâdx>0„ÅÆ(1,1)(2,0)(-1,0)
				//„Å§„Åæ„Çã„Å®„Åì„Çç„ÄÅ„Åì„Åì„?ÆÊ≠©Êï∞„Å´„Åü„Å©„ÇäÁùÄ„ÅèÁõ¥Ââç„ÅßÂÄôË£ú„Å´„ÅÇ„Å£„Åü„ÇÑ„Å§„Çâ„?Ø„ÄÅ„Åù„ÅÆÊôÇ„Å´Ë°å„Å£„Åü„Åª„Å?„ÅåÊó©„Å?„Å´Ê±∫„Åæ„Å£„Å¶„Çã„?Æ„ÅßÁÑ°Ë¶?
				temp_dir = dir;
				if (!(x % 2)) {		//Á∏¶Â£Å„?ÆÊô?
					dx = (2 - ABS(n)) * SIGN(dir.x);
					dy = n;
					curve_index = ABS(dir.y - dy);		//0„ÅåÁõ¥ÈÄ≤„Ä?1„Å?45¬∞„Ä?2„Å?90¬∞
					temp_dir.y = n;
				} else {			//Á∏¶„Åß„Å™„Åë„Çå„Å∞Ê®™?º?y%2==0?ºâ„Åó„Åã„Å™„Å?
					dx = n;
					dy = (2 - ABS(n)) * SIGN(dir.y);
					curve_index = ABS(dir.x - dx);			//0„ÅåÁõ¥ÈÄ≤„Ä?1„Å?45¬∞„Ä?2„Å?90¬∞
					temp_dir.x = n;
				}
				next_step += curve_w.at(curve_index);	//„Ç´„Éº„Éñ„Åô„Çã„Åì„Å®„Å´ÂØæ„Åô„ÇãÈáç„Åø„ÇíË∂≥„Å?

//„Åù„?ÆÁõ¥Á∑öÊñπÂêë„Å´„ÄÅÊõ∏„ÅçËæº„ÇÅ„Å™„Åè„Å™„Çã„Åæ„ÅßÊõ∏„ÅçËæº„Çì„Åß„Å?„Å?
				for (uint8_t i = 0;; i++) {
//Áõ¥Á∑ö„ÅåÁ∂ö„Åè„Å®Ë∂≥„Åó„Å¶„Å?„ÅèÊ≠©Êï∞„ÅØÂ∞è„Åï„Åè„Å™„Å£„Å¶„Å?„Å?
					if (n == 0) {		//Âå∫Áîª„ÇíÊ®™Âà?„Çã„Å®„Å?
						if (i < straight_w.size())
							straight = straight_w.at(i);//Ë¶ÅÁ¥?Â§ñ„Å´Âá∫„ÇãÂ?¥Âêà„?ØÂÄ§„ÇíÊõ¥Êñ∞„Åó„Å™„Å?ºùÊúÄÂæå„?ÆÂÄ§„ÅåÁ∂ö„Åè
					} else {			//Êñú„ÇÅÊñπÂêë„?ÆÁõ¥ÈÄ≤„ÅÆ„Å®„Å?
						if (i < oblique_w.size())
							straight = oblique_w.at(i);	//Ë¶ÅÁ¥?Â§ñ„Å´Âá∫„ÇãÂ?¥Âêà„?ØÂÄ§„ÇíÊõ¥Êñ∞„Åó„Å™„Å?ºùÊúÄÂæå„?ÆÂÄ§„ÅåÁ∂ö„Åè
					}
//Ê≠©Êï∞„ÇíÊõ∏„ÅçËæº„ÇÅ„Åü„Çâ„?ÅÊõ∏„ÅçËæº„Çì„Å†Â∫ßÊ®ô„ÇíQueue„Å´„Å∂„Å£„Åì„?
					if (set_step_double(x + dx * (i + 1), y + dy * (i + 1),
							(next_step + straight), by_known)) {
						next_step += straight;		//„Çπ„É?„É?„Éó„ÇíÊõ¥Êñ∞
						x_queue.push(x + (i + 1) * dx);
						y_queue.push(y + (i + 1) * dy);
						dir_queue.push(temp_dir.xy);
					} else {
						break;	//Êõ∏„ÅçËæº„ÇÅ„Å™„Åè„Å™„Å£„Åü„Çâ„É´„Éº„Éó„ÇíÊäú„Åë„Ç?
					}
//Áõ¥Á∑ö„ÅåÁ∂ö„Åè„Åì„Å®„Å´„Çà„ÇãÈáç„Åø„ÅÆÊ∏õÂ∞ë„Åå„Å™„Å?„Å™„Çâ‰∏?Âõû„Å†„Åë„ÅßÊäú„Åë„Ç?
					if (algo == adachi || algo == based_distance) {
						break;
					}
//ÊûùÂ??„Ç?
					if (debranch && (next_step > mouse_step)) {
						break;
					}
				}

			}
		}
	}

}

bool node_search::create_small_path(
		std::vector<std::pair<uint8_t, uint8_t> > finish,
		std::pair<uint8_t, uint8_t> init, compas mouse_direction) {
//Ê≠©Êï∞„Éû„ÉÉ„Éó‰ΩúË£Ω
	node_step::reset_step(init_step);
	spread_step(finish, true);	//„Åì„Åì„ÅØÊó¢Áü•Â£Å„Å†„Åë„ÅßÊ≠©Êï∞„Éû„ÉÉ„Éó‰ΩúË£Ω
	return node_path::create_path(init, mouse_direction);	//Ê≠©Êï∞„Éû„ÉÉ„Éó„Å´Âæì„Å£„Å¶„Éë„Çπ‰ΩúË£Ω

}

bool node_search::create_big_path(
		std::vector<std::pair<uint8_t, uint8_t> > finish,
		std::pair<uint8_t, uint8_t> init, compas mouse_direction) {
	if (create_small_path(finish, init, mouse_direction)) {	//Â∞èÂõû„Çä„Éë„Çπ‰ΩúË£Ω
		node_path::improve_path();	//Â∞èÂõû„Çä„ÇíÂ§ßÂõû„Çä„Éë„Çπ„Å´ÊîπËâØ
		return true;
	}
	return false;
}

void node_search::reset_finish() {
//ÁõÆÁö?Âú∞ÊÉ?Â†±„Çí„Åô„Åπ„Å¶„É™„Çª„É?„É?
	for (int i = 0; i < MAZE_SIZE; i++) {
		x_finish[i].all = 0;
		y_finish[i].all = 0;
	}
}

void node_search::set_finish_cell(uint8_t _x, uint8_t _y) {
	set_finish(_x, _y, north);
	set_finish(_x, _y, south);
	set_finish(_x, _y, east);
	set_finish(_x, _y, west);
}

void node_search::set_finish(uint8_t _x, uint8_t _y, compas dir) {
	uint8_t set_x = _x;
	uint8_t set_y = _y;

	if (dir == east) {
		if (set_x == 0)		//‰∏?Áï™Â∑¶„ÅØÂ∏∏„Å´Â§ñÂ£Å„Å™„ÅÆ„ÅßÁÑ°Ë¶?
			return;
		else
			set_x--;		//Âø?„ÅöÂè≥„ÇíÊõ¥Êñ∞
	}
	if (dir == east || dir == west) {
		if (set_x < MAZE_SIZE)
			set_maze_wall(&x_finish[set_y], set_x, true);//x_finish[y]„ÅÆxÁï™ÁõÆ„ÅÆÂè≥Âå∫Áîª‰∏≠Âø?
		return;
	}

	if (dir == south) {
		if (set_y == 0) 		//‰∏?Áï™‰∏ãÂ£Å„?ØÁÆ°Áê?„Åó„Å™„Å?
			return;
		else
			set_y--;	//Âø?„Åö‰∏äÂ£Å„ÇíÊõ¥Êñ∞„Åô„Çã„Çà„ÅÜ„Å´„ÄÅÂ∫ßÊ®ô„ÇíÂ§â„Åà„Ç?

	}
	if (dir == south || dir == north) {
		if (set_y < MAZE_SIZE)
			set_maze_wall(&y_finish[set_x], set_y, true);//x_maze_wall[y]„ÅÆxÁï™ÁõÆ„ÅÆÂè≥Â£Å„Å´1„Çí‰ª£ÂÖ•
		return;
	}

}

bool node_search::get_finish(uint8_t _x, uint8_t _y, compas dir) {
	uint8_t get_x = _x;
	uint8_t get_y = _y;

	if (dir == east) {
		if (get_x == 0)		//‰∏?Áï™Â∑¶„ÅØÂ∏∏„Å´Â§ñÂ£Å„Å™„ÅÆ„ÅßÁÑ°Ë¶?
			return false;	//Â£Å„Å™„ÅÆ„Åß„Ç¥„Éº„É´Â∫ßÊ®ô„Å®„Åó„Å¶„ÅØ‰∏çÈÅ©
		else
			get_x--;		//Âø?„ÅöÂè≥„ÇíÊõ¥Êñ∞
	}
	if (dir == east || dir == west) {
		if (get_x < MAZE_SIZE)
			return get_maze_wall(x_finish[get_y], get_x);//x_finish[y]„ÅÆxÁï™ÁõÆ„ÅÆÂè≥Âå∫Áîª‰∏≠Âø?
	}

	if (dir == south) {
		if (get_y == 0) 		//‰∏?Áï™‰∏ãÂ£Å„?ØÁÆ°Áê?„Åó„Å™„Å?
			return false;
		else
			get_y--;	//Âø?„Åö‰∏äÂ£Å„ÇíÊõ¥Êñ∞„Åô„Çã„Çà„ÅÜ„Å´„ÄÅÂ∫ßÊ®ô„ÇíÂ§â„Åà„Ç?

	}
	if (dir == south || dir == north) {
		if (get_y < MAZE_SIZE)
			return get_maze_wall(y_finish[get_x], get_y);//x_maze_wall[y]„ÅÆxÁï™ÁõÆ„ÅÆÂè≥Â£Å„Å´1„Çí‰ª£ÂÖ•
	}

	return false;

}

node_search::node_search() {
	set_weight_algo(weight_algo::adachi);
	reset_finish();

}

node_search::node_search(uint16_t init_step) {
	node_step::reset_step(init_step);
	set_weight_algo(weight_algo::adachi);
	reset_finish();
}

node_search::~node_search() {
}

std::vector<path_element> node_path::path;

PATH node_path::to_PATH(path_element from) {
	PATH ans;

	ans.element.flag = TRUE;
	ans.element.distance = from.distance;

	if (from.is_right)
		ans.element.muki = MUKI_RIGHT;
	else
		ans.element.muki = MUKI_LEFT;

	switch (from.turn) {
	case none:
		ans.element.turn = from.turn;
		break;

	case small:
	case big_90:
	case big_180:
		ans.element.turn = from.turn;
		break;

	case begin_45:
	case end_45:
		ans.element.turn = 4;
		break;

	case begin_135:
	case end_135:
		ans.element.turn = 5;
		break;

	case oblique_90:
		ans.element.turn = 6;
		break;

	default:
		mouse::error();
		myprintf(" Error! Not expected turn type at to_PATH() \n\r");
		myprintf(" turn type is [%d] \n\r", from.turn);
		break;
	}

	return ans;

}

bool node_path::is_right_turn(compas now, compas next) {
	bool ans;

	switch ( now ) {
	case north:
		if ( next == east ){
			ans = true;
		} else {
			ans = false;
		}
		break;

	case south:
		if (next == west){
			ans = true;
		} else {
			ans = false;
		}
		break;

	case east:
		if (next == south){
			ans = true;
		} else {
			ans = false;
		}
		break;

	case west:
		if (next == north){
			ans = true;
		} else {
			ans = false;
		}
		break;

	default:
		ans = false;
		mouse::error();
		myprintf(" Error! Not expected turn type at is_right_turn() \n\r");
		myprintf(" now direction is [%d] \n\r", now);
		break;
	}
	return ans;
}

void node_path::format() {
	//distance=0, sla_type=none, is_right=true„Ä?„Ç?1„Å§„Å?„ÅëÁî®ÊÑè„Åó„ÄÅ„Åù„Çå„Åßpath„ÇíÂ?ùÊúüÂå?
	std::vector<path_element>().swap(path);
	path_element init = { 0, none, true };
	path.emplace_back(init);
}

void node_path::push_straight(int half) {
	(path.back()).distance += half;	//Áõ¥Á∑ö„ÇíÂ¢ó„ÇÑ„Å?
}

void node_path::push_small_turn(bool is_right) {
	(path.back()).turn = small;		//Á®ÆÈ°û„?ØÂ∞èÂõû„Ç?
	(path.back()).is_right = is_right;		//Âè≥Âêë„Åç

	path_element temp = { 0, none, true };
	path.emplace_back(temp);		//Ê¨°„ÅÆË¶ÅÁ¥?„Çí‰Ωú„Å£„Å¶„Åä„Åè

}

bool node_path::create_path(std::pair<uint8_t, uint8_t> init,
		compas mouse_direction) {
	node_path::format();				//„Éë„Çπ„ÇíÂ?ùÊúüÂå?
	node_path::push_straight(1);				//Âå∫Áîª‰∏≠Âø?„Å´„Å?„ÇãÊÉ≥ÂÆö„Å™„ÅÆ„ÅßÂçäÂå∫ÈñìÂâçÈÄ≤

//Âêë„Åã„Å£„Å¶„Å?„ÇãÊñπÂêë„?ÆÊ≠©Êï∞„ÅåÂ?ùÊúüÂÄ§„Å™„Çâ„??ÈÅì„ÅåÈñâ„Åò„Å¶„Å?„Çã„?Æ„ÅßÁµÇ‰∫?
	uint16_t now_step = get_step(init.first, init.second, mouse_direction);
	if (now_step >= init_step)
		return false;

//Ê≠©Êï∞„ÅÆ‰Ωé„ÅÑÊñπ„Å∏‰∏ã„Å£„Å¶„Å?„Å?
	compas now_compas = mouse_direction;
	uint8_t now_x = init.first;
	uint8_t now_y = init.second;
	int8_t dx, dy;
	uint16_t next_step = now_step;
	compas next_compas = now_compas;
	while (now_step != 0) {

		//Ê¨°„ÅÆÊñπËßí„Å∏„Éû„Çπ„ÇíÁßªÂãï„??‚ÄªÂå∫ÁîªÂ§ñ„Å´Âá∫„Çã„Å®„Åã„?Ø„ÄÅÊ≠©Êï∞„Éû„ÉÉ„Éó‰ΩúÊ?êÊôÇ„Å´„ÅØ„Åò„Åã„Çå„Å¶„Çã„?Ø„Åö„Å®‰ø°„Åò„Å¶„Å?„Ç?
		switch (next_compas) {
		case north:
			//now_y += 1;
			dx = 0;
			dy = 1;
			break;
		case south:
			//now_y -= 1;
			dx = 0;
			dy = -1;
			break;
		case east:
			//now_x += 1;
			dx = 1;
			dy = 0;
			break;
		case west:
			//now_x -= 1;
			dx = -1;
			dy = 0;
			break;
		default:	//Êñú„ÇÅ„ÅØ‰∫àÊúü„Åõ„Å¨„Ç®„É©„Éº
			return false;
			break;
		}
		now_x += dx;		//XÂ∫ßÊ®ôÊõ¥Êñ∞
		now_y += dy;		//YÂ∫ßÊ®ôÊõ¥Êñ∞

		next_compas = get_min_compas(now_x, now_y);		//Ê¨°„Å´Ë°å„ÅèÊñπËßí„ÇíÊ±∫„ÇÅ„Çã
		next_step = get_step(now_x, now_y, next_compas);		//Ê¨°„Å´Ë°å„ÅèÂ†¥Êâ?„ÅÆÊ≠©Êï∞„ÇÇÂèñÂæ?

		if (now_step <= next_step)
			return false;	//‰ªä„?ÆÊ≠©Êï∞„ÅåÊ¨°Ë°å„Åè„Åπ„ÅçÊ≠©Êï∞„Å®Âêå„Åò„Åã„Åù„Çå‰ª•‰∏ã„Å®„Å?„Å?„Åì„Å®„ÅØ„ÅÇ„ÇäÂæó„Å™„Å?„ÅØ„Åö„Å™„ÅÆ„Åß„ÄÅ„Å®„Çä„ÅÇ„Åà„ÅöÂ§±Êïó„Åó„Å®„Å?

		//„Éë„Çπ„ÇíËøΩÂä?
		if (now_compas == next_compas)
			node_path::push_straight(2);		//‰ªä„?ÆÂêë„Åç„Å®Âêå„ÅòÊñπÂêë„Å´ÈÄ≤„Ç?„Å™„ÇâÁõ¥ÈÄ≤
		else
			node_path::push_small_turn(is_right_turn(now_compas, next_compas));	//„Çø„Éº„É≥‰ª•Â§ñ„?ÆÈÅ∏ÊäûËÇ¢„ÅØ„Å™„Å?„ÅØ„Å?

		now_step = next_step;		//Ê≠©Êï∞„ÇíÊõ¥Êñ∞
		now_compas = next_compas;		//ÊñπËßí„ÇíÊõ¥Êñ∞

	}

//Ê¨°„ÅÆÊñπËßí„?ÆÂ§âÂåñÊñπÂêë„ÇíÂèñÂæ?
	switch (next_compas) {
	case north:
		//now_y += 1;
		dx = 0;
		dy = 1;
		break;
	case south:
		//now_y -= 1;
		dx = 0;
		dy = -1;
		break;
	case east:
		//now_x += 1;
		dx = 1;
		dy = 0;
		break;
	case west:
		//now_x -= 1;
		dx = -1;
		dy = 0;
		break;
	default:	//Êñú„ÇÅ„Å´„Å™„Çã„?Æ„ÅØ‰∫àÊúü„Åõ„Å¨Â†¥Âêà„Å†„Å?
		return false;
		break;
	}

//Ë§?Êï∞„Éû„Çπ„Ç¥„Éº„É´„ÅÆÂ†¥ÂêàÁî®„Å´„Ä?0„ÅÆÁ∂ö„ÅèÈôê„ÇäÁõ¥ÈÄ≤
	while (1) {
		now_x += dx;		//XÂ∫ßÊ®ôÊõ¥Êñ∞
		now_y += dy;		//YÂ∫ßÊ®ôÊõ¥Êñ∞

		if (get_step(now_x, now_y, next_compas) != 0) {	//„Ç¥„Éº„É´Â§ñ„Å´Âá∫„Åü„Çâ
			break;
		} else {									//„Ç¥„Éº„É´Âå∫Áîª„Åå„Åæ„Å?Á∂ö„Åè„Å™„Ç?
			node_path::push_straight(2);
		}

	}
	node_path::push_straight(1);		//Âå∫Áîª„Å´ÂÖ•„Çä„Åç„Çã„Åü„ÇÅ„Å´ÂçäÂå∫ÁîªÁõ¥ÈÄ≤„Åó„Å¶ÁµÇ‰∫?

	mouse::set_position(now_x, now_y);

	return true;

}

void node_path::improve_path() {

	uint16_t count = 0;
	uint8_t temp_distance = 0;	//‰∏?ÊôÇÁöÑ„Å™Ë∑ùÈõ¢‰øùÂ≠?
	bool naname_flag = false;	//ÁèæÂú®Ê©ü‰Ωì„ÅåÊñú„ÇÅ„Åã„ÇíÂà§Êñ≠	ON„Å™„ÇâÊñú„ÇÅËµ∞Ë°å‰∏≠
	uint16_t size = path.size();

	path.at(size - 1).distance -= 1;//Êú?Âæå„?ÆÂå∫Áîª„ÅÆ‰∏≠Âø?„Åæ„ÅßÂÖ•„ÇäËæº„Ç?„Åü„ÇÅ„ÅÆÂçäÂå∫ÈñìÁõ¥ÈÄ≤„ÇíÊ∂à„Åô„ÄÇ„??„Åì„ÅÜ„Åó„Å¶„Åä„Åã„Å™„Å?„Å®Êú?Âæå„ÅåÂ§ßÂõû„Çä„Å´‰∏∏„ÇÅËæº„Åæ„Çå„Å¶Ê∏õÈ?ü„Åß„Åç„Å™„Åè„Å™„ÇãÂèØËÉΩÊÄß„Åå„ÅÇ„Çã„Åã„Ç?

	while (count < path.size()) {		//path„ÅåÁµÇ„Çè„Çå„?∞ÁµÇ‰∫?
		if (naname_flag) {		//Êñú„ÇÅËµ∞Ë°å‰∏≠„Å™„Ç?	Á¢∫ÂÆü„Å´Áõ¥ÈÄ≤Ë∑ùÈõ¢(distance)„Å?0„ÅÆ„ÅØ„Å?

			if (get_path(count + 1).element.distance >= 1) {//Ê¨°„ÅÆ„Çø„Éº„É≥Âæ?90mm‰ª•‰∏äÁõ¥ÈÄ≤(Êñú„ÇÅÁµÇ„Çè„Ç?)
				path.at(count).turn = end_45;		//45¬∞„Çø„Éº„É≥„Å´Â§âÊõ¥
				path.at(count + 1).distance -= 1;		//Áõ¥Á∑öË∑ùÈõ¢„Ç?90mmÊ∏õ„Çâ„Å?
				naname_flag = false;
				count++;		//ÈÖçÂ?ó„ÇíÊ¨°„Å∏

			} else if (get_path(count + 2).element.distance >= 1) {	//Ê¨°„ÅÆÊ¨°„ÅÆ„Çø„Éº„É≥Âæ?90mm‰ª•‰∏äÁõ¥ÈÄ≤(Êñú„ÇÅÁµÇ„Çè„Ç?)

				if (path.at(count).is_right == path.at(count + 1).is_right) {//Âêå„ÅòÊñπÂêë„?Æ2Âõû„Çø„Éº„É≥
					path.at(count).turn = end_135;	//135¬∞„Çø„Éº„É≥„Å´Â§âÊõ¥
					path.erase(path.begin() + count + 1);	//‰∏?ÂÄã„Åö„Çâ„Åô
					path.at(count + 1).distance -= 1;	//„Çø„Éº„É≥Âæå„?ÆÁõ¥Á∑öË∑ùÈõ¢„Ç?90mmÊ∏õ„Çâ„Å?
					naname_flag = false;
					count++;	//ÈÖçÂ?ó„ÇíÊ¨°„Å∏

				} else {								//‰∫§‰∫í„?Æ„Çø„Éº„É≥(„ÇÆ„Ç∂„ÇÆ„Ç∂)
					path.at(count).distance += 1;				//Êñú„ÇÅ„ÅÆÁõ¥Á∑öË∑ùÈõ¢„Ç?1Â¢ó„ÇÑ„Å?
					temp_distance = path.at(count).distance;	//Ë∑ùÈõ¢„Çí‰∏?ÊôÇÁöÑ„Å´ÊåÅ„Å£„Å¶„Åä„Åè
					path.erase(path.begin() + count);					//‰∏?ÂÄã„Åö„Çâ„Åô
					path.at(count).distance = temp_distance;		//Ë∑ùÈõ¢„ÇíÂ?•„Çå„Å™„Åä„Åô

				}

			} else {									//„Åæ„Å?„Åæ„Å?Êñú„ÇÅ„ÅØÁ∂ö„Åè„Å™„Ç?
				if (count + 1 < size) {		//Ê¨°„ÅÆ„Éë„Çπ„ÅåÂ≠òÂú®„Åô„Çã
					if (path.at(count + 1).turn == none) {
						//Êñú„ÇÅ„ÅÆÂ§ßÂõû„Çä„ÅßÁµÇ„Çè„Çã„Éë„Çø„Éº„É≥
						temp_distance = path.at(count).distance;//Ë∑ùÈõ¢„Çí‰∏?ÊôÇÁöÑ„Å´ÊåÅ„Å£„Å¶„Åä„Åè
						path.erase(path.begin() + count);		//‰∏?ÂÄã„Åö„Çâ„Åô
						path.at(count).distance = temp_distance;//Ë∑ùÈõ¢„ÇíÂ?•„Çå„Å™„Åä„Åô						count++;
						naname_flag = false;
					} else {
						if (path.at(count).is_right
								== path.at(count + 1).is_right) {//Âêå„ÅòÊñπÂêë„?Æ2Âõû„Çø„Éº„É≥	„Ç≥„ÅÆÂ≠?
							path.at(count).turn = oblique_90;	//Êñú„ÇÅ90¬∞„Çø„Éº„É≥„Å´Â§âÊõ¥
							path.erase(path.begin() + count + 1);		//‰∏?ÂÄã„Åö„Çâ„Åô
							count++;		//ÈÖçÂ?ó„ÇíÊ¨°„Å∏
						} else {					//ÈÅï„ÅÜÊñπÂêë„?Æ2Âõû„Çø„Éº„É≥	„ÇÆ„Ç∂„ÇÆ„Ç∂
							path.at(count).distance += 1;		//Êñú„ÇÅ„ÅÆÁõ¥Á∑öË∑ùÈõ¢„Ç?1Â¢ó„ÇÑ„Å?
							temp_distance = path.at(count).distance;//Ë∑ùÈõ¢„Çí‰∏?ÊôÇÁöÑ„Å´ÊåÅ„Å£„Å¶„Åä„Åè
							path.erase(path.begin() + count);			//‰∏?ÂÄã„Åö„Çâ„Åô
							path.at(count).distance = temp_distance;//Ë∑ùÈõ¢„ÇíÂ?•„Çå„Å™„Åä„Åô

						}
					}
				} else {			//TODO Êñú„ÇÅ„ÅÆ„Åæ„Åæ„Éë„Çπ„ÅåÁµÇ‰∫?„Åô„Çã„Ä?„Å®„Çä„ÅÇ„Åà„ÅöÂÖ•„Çä„Åç„Çâ„Åö„Å´ÁµÇ‰∫?„Åô„Çã
//FIX_ME Êñú„ÇÅ„ÅÆ„Åæ„ÅæÁµÇ‰∫?„Åô„Çã„Å®„Åç„?ÆÂá¶Áê?
					path.at(count).distance += 1;				//Êñú„ÇÅ„ÅÆÁõ¥Á∑öË∑ùÈõ¢„Ç?1Â¢ó„ÇÑ„Å?
					path.at(count).turn = none;
					count = size;							//ÁµÇ‰∫?
				}
			}

		} else {										//Êñú„ÇÅ„Åò„ÇÉ„Å™„Åë„Çå„Å∞

			if (count + 1 < size) {	//count+1„Åß„ÇÇ„Éë„Çπ„ÅåÁµÇ„Çè„Çâ„Å™„Å?„Å™„Ç?

				if (path.at(count + 1).distance >= 1) {	//„Çø„Éº„É≥Âæå„ÇÇ90mm‰ª•‰∏äÁõ¥ÈÄ≤„Åô„Çã„Å™„Ç?	Â§ßÂõû„Çä„ÅÆ„ÉÅ„Çß„É?„ÇØ„ÇíË°å„ÅÜ
					path.at(count).turn = big_90;	//Â§ßÂõû„Çä„Çø„Éº„É≥„Å´Â§âÊõ¥
					path.at(count).distance -= 1;	//Áõ¥Á∑öË∑ùÈõ¢„Ç?90mmÊ∏õ„Çâ„Å?
					path.at(count + 1).distance -= 1;	//Áõ¥Á∑öË∑ùÈõ¢„Ç?90mmÊ∏õ„Çâ„Å?

				} else {							//„Çø„Éº„É≥Âæ?90mmÁõ¥ÈÄ≤„ÅØ„Åó„Å™„Å?„Å™„Ç?

					if (path.at(count).is_right
							== path.at(count + 1).is_right) {//Âêå„ÅòÊñπÂêë„Å´Êõ≤„Åå„Çã„Å™„Ç?(U„Çø„Éº„É≥)
						if (count + 2 < size) {		//2„Å§ÂÖà„Åæ„Åß„Éë„Çπ„ÅåÂ≠òÂú®„Åô„Çã„Å™„Ç?
							if (path.at(count + 2).distance >= 1) {	//U„Çø„Éº„É≥Âæ?90mmÁõ¥ÈÄ≤„Åô„Çã„Å™„Ç?
								path.at(count).turn = big_180;	//180¬∞„Çø„Éº„É≥„Å´Â§âÊõ¥
								path.at(count).distance -= 1;	//Áõ¥Á∑öË∑ùÈõ¢„Ç?90mmÊ∏õ„Çâ„Å?
								path.at(count + 2).distance -= 1;//Áõ¥Á∑öË∑ùÈõ¢„Ç?90mmÊ∏õ„Çâ„Å?
								path.erase(path.begin() + count + 1);	//‰∏?ÂÄã„Åö„Çâ„Åô

							} else {					//U„Çø„Éº„É≥Âæå„Åô„ÅêÊõ≤„Åå„Çã„Å™„Ç?
								path.at(count).turn = begin_135;	//135¬∞„Çø„Éº„É≥„Å´Â§âÊõ¥
								path.at(count).distance -= 1;	//Áõ¥Á∑öË∑ùÈõ¢„Ç?90mmÊ∏õ„Çâ„Å?
								path.erase(path.begin() + count + 1);	//‰∏?ÂÄã„Åö„Çâ„Åô
								naname_flag = true;

							}

						}
					} else {		//ÈÅï„ÅÜÊñπÊ≥ï„Å´Êõ≤„Åå„Çã„Å™„Ç?
						path.at(count).turn = begin_45;		//45¬∞„Çø„Éº„É≥„Å´Â§âÊõ¥
						path.at(count).distance -= 1;		//Áõ¥Á∑öË∑ùÈõ¢„Ç?90mmÊ∏õ„Çâ„Å?
						naname_flag = true;

					}

				}
			}
			count++;		//ÈÖçÂ?ó„ÇíÊ¨°„Å∏
		}

		size = path.size();		//size„ÇíÊõ¥Êñ∞

	}

//Êú?Âàù„Å´1„Å§Ââä„Å£„Åü„Åã„ÇâÂøò„Çå„ÅöË∂≥„Åó„Å¶„Åä„Åè
	if (naname_flag)
		path.at(size - 1).distance -= 1;
	else
		path.at(size - 1).distance += 1;

}

PATH node_path::get_path(uint16_t index) {
	if (index >= path.size()) {		//Ë¶ÅÁ¥?Â§ñ„Ç¢„ÇØ„Çª„ÇπÁ¶ÅÊ≠¢
		path_element temp = { 0, none, true };
		PATH ans = to_PATH(temp);
		ans.element.flag = FALSE;
		return ans;
	}
	path_element tar = path.at(index);
	if ((tar.distance == 0) && (tar.turn == none)) {
//path.erase(path.begin() + index);		//Áõ¥ÈÄ≤„Å™„Åó„Åã„Å§„Çø„Éº„É≥„Å™„Åó„?ÆÂ†¥ÂêàÔºàËµ∑„Åì„Çä„Å?„Çã„?Æ„ÅØÊú´Â∞æ„Å?„Åë„?Æ„ÅØ„ÅöÔºâ„ÅÑ„Çâ„Å™„Å?„ÅÆ„ÅßÂâäÈô§
		return get_path(index + 1);
	}
	return to_PATH(tar);

}

node_path::node_path() {
	format();
}

node_path::~node_path() {

}

void node_path::convert_path() {
	path::path_reset();
	for (int i = 0; i < PATH_MAX; i++) {
		path::set_path(i, get_path(i));
	}

}
